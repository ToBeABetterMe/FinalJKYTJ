package com.c102c.app.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.c102c.app.model.Dictionary_down;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DICTIONARY_DOWN".
*/
public class Dictionary_downDao extends AbstractDao<Dictionary_down, Long> {

    public static final String TABLENAME = "DICTIONARY_DOWN";

    /**
     * Properties of entity Dictionary_down.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TypeCode = new Property(1, String.class, "typeCode", false, "TYPE_CODE");
        public final static Property TypeName = new Property(2, String.class, "typeName", false, "TYPE_NAME");
        public final static Property TypeOptionCode = new Property(3, String.class, "typeOptionCode", false, "TYPE_OPTION_CODE");
        public final static Property ItemCode = new Property(4, String.class, "itemCode", false, "ITEM_CODE");
        public final static Property ItemName = new Property(5, String.class, "itemName", false, "ITEM_NAME");
        public final static Property ItemOrder = new Property(6, String.class, "itemOrder", false, "ITEM_ORDER");
        public final static Property ExclusiveCode = new Property(7, String.class, "exclusiveCode", false, "EXCLUSIVE_CODE");
        public final static Property InputCode = new Property(8, String.class, "inputCode", false, "INPUT_CODE");
    };


    public Dictionary_downDao(DaoConfig config) {
        super(config);
    }
    
    public Dictionary_downDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DICTIONARY_DOWN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPE_CODE\" TEXT," + // 1: typeCode
                "\"TYPE_NAME\" TEXT," + // 2: typeName
                "\"TYPE_OPTION_CODE\" TEXT," + // 3: typeOptionCode
                "\"ITEM_CODE\" TEXT," + // 4: itemCode
                "\"ITEM_NAME\" TEXT," + // 5: itemName
                "\"ITEM_ORDER\" TEXT," + // 6: itemOrder
                "\"EXCLUSIVE_CODE\" TEXT," + // 7: exclusiveCode
                "\"INPUT_CODE\" TEXT);"); // 8: inputCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DICTIONARY_DOWN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Dictionary_down entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String typeCode = entity.getTypeCode();
        if (typeCode != null) {
            stmt.bindString(2, typeCode);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(3, typeName);
        }
 
        String typeOptionCode = entity.getTypeOptionCode();
        if (typeOptionCode != null) {
            stmt.bindString(4, typeOptionCode);
        }
 
        String itemCode = entity.getItemCode();
        if (itemCode != null) {
            stmt.bindString(5, itemCode);
        }
 
        String itemName = entity.getItemName();
        if (itemName != null) {
            stmt.bindString(6, itemName);
        }
 
        String itemOrder = entity.getItemOrder();
        if (itemOrder != null) {
            stmt.bindString(7, itemOrder);
        }
 
        String exclusiveCode = entity.getExclusiveCode();
        if (exclusiveCode != null) {
            stmt.bindString(8, exclusiveCode);
        }
 
        String inputCode = entity.getInputCode();
        if (inputCode != null) {
            stmt.bindString(9, inputCode);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Dictionary_down readEntity(Cursor cursor, int offset) {
        Dictionary_down entity = new Dictionary_down( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // typeCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // typeName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // typeOptionCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // itemCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // itemName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // itemOrder
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // exclusiveCode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // inputCode
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Dictionary_down entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTypeCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTypeName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTypeOptionCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setItemCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setItemName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setItemOrder(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setExclusiveCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setInputCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Dictionary_down entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Dictionary_down entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
