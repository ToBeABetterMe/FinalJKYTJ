package com.c102c.app.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.c102c.app.model.LocalMeasurementXueYa;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_MEASUREMENT_XUE_YA".
*/
public class LocalMeasurementXueYaDao extends AbstractDao<LocalMeasurementXueYa, Long> {

    public static final String TABLENAME = "LOCAL_MEASUREMENT_XUE_YA";

    /**
     * Properties of entity LocalMeasurementXueYa.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PersonId = new Property(1, String.class, "personId", false, "PERSON_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property IdCard = new Property(3, String.class, "idCard", false, "ID_CARD");
        public final static Property Szy = new Property(4, String.class, "szy", false, "SZY");
        public final static Property Ssy = new Property(5, String.class, "ssy", false, "SSY");
        public final static Property Ml = new Property(6, String.class, "ml", false, "ML");
        public final static Property Time = new Property(7, String.class, "time", false, "TIME");        
    };


    public LocalMeasurementXueYaDao(DaoConfig config) {
        super(config);
    }
    
    public LocalMeasurementXueYaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_MEASUREMENT_XUE_YA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PERSON_ID\" TEXT," + // 1: personId
                "\"NAME\" TEXT," + // 2: name
                "\"ID_CARD\" TEXT," + // 3: idCard
                "\"SZY\" TEXT," + // 4: szy
                "\"SSY\" TEXT," + // 5: ssy
                "\"ML\" TEXT," + // 6: ml
                "\"TIME\" TEXT);"); // 7: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_MEASUREMENT_XUE_YA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LocalMeasurementXueYa entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(2, personId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String idCard = entity.getIdCard();
        if (idCard != null) {
            stmt.bindString(4, idCard);
        }
 
        String szy = entity.getSzy();
        if (szy != null) {
            stmt.bindString(5, szy);
        }
 
        String ssy = entity.getSsy();
        if (ssy != null) {
            stmt.bindString(6, ssy);
        }
 
        String ml = entity.getMl();
        if (ml != null) {
            stmt.bindString(7, ml);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(8, time);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LocalMeasurementXueYa readEntity(Cursor cursor, int offset) {
        LocalMeasurementXueYa entity = new LocalMeasurementXueYa( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // idCard
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // szy
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ssy
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ml
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LocalMeasurementXueYa entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPersonId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIdCard(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSzy(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSsy(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LocalMeasurementXueYa entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LocalMeasurementXueYa entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
