package com.c102c.app.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.c102c.app.model.Area_down;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AREA_DOWN".
*/
public class Area_downDao extends AbstractDao<Area_down, Long> {

    public static final String TABLENAME = "AREA_DOWN";

    /**
     * Properties of entity Area_down.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AreaCode = new Property(1, String.class, "areaCode", false, "AREA_CODE");
        public final static Property AreaName = new Property(2, String.class, "areaName", false, "AREA_NAME");
        public final static Property AreaType = new Property(3, String.class, "areaType", false, "AREA_TYPE");
        public final static Property ParentAreaCode = new Property(4, String.class, "parentAreaCode", false, "PARENT_AREA_CODE");
        public final static Property LevelOrder = new Property(5, String.class, "levelOrder", false, "LEVEL_ORDER");
    };


    public Area_downDao(DaoConfig config) {
        super(config);
    }
    
    public Area_downDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AREA_DOWN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"AREA_CODE\" TEXT," + // 1: areaCode
                "\"AREA_NAME\" TEXT," + // 2: areaName
                "\"AREA_TYPE\" TEXT," + // 3: areaType
                "\"PARENT_AREA_CODE\" TEXT," + // 4: parentAreaCode
                "\"LEVEL_ORDER\" TEXT);"); // 5: levelOrder
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AREA_DOWN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Area_down entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String areaCode = entity.getAreaCode();
        if (areaCode != null) {
            stmt.bindString(2, areaCode);
        }
 
        String areaName = entity.getAreaName();
        if (areaName != null) {
            stmt.bindString(3, areaName);
        }
 
        String areaType = entity.getAreaType();
        if (areaType != null) {
            stmt.bindString(4, areaType);
        }
 
        String parentAreaCode = entity.getParentAreaCode();
        if (parentAreaCode != null) {
            stmt.bindString(5, parentAreaCode);
        }
 
        String levelOrder = entity.getLevelOrder();
        if (levelOrder != null) {
            stmt.bindString(6, levelOrder);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Area_down readEntity(Cursor cursor, int offset) {
        Area_down entity = new Area_down( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // areaCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // areaName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // areaType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // parentAreaCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // levelOrder
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Area_down entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAreaCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAreaName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAreaType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setParentAreaCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLevelOrder(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Area_down entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Area_down entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
