package com.c102c.app.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.c102c.app.model.Org_down;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORG_DOWN".
*/
public class Org_downDao extends AbstractDao<Org_down, Long> {

    public static final String TABLENAME = "ORG_DOWN";

    /**
     * Properties of entity Org_down.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrgCode = new Property(1, String.class, "orgCode", false, "ORG_CODE");
        public final static Property OrgName = new Property(2, String.class, "orgName", false, "ORG_NAME");
        public final static Property OrgType = new Property(3, String.class, "orgType", false, "ORG_TYPE");
        public final static Property ParentOrgCode = new Property(4, String.class, "parentOrgCode", false, "PARENT_ORG_CODE");
        public final static Property AreaCode = new Property(5, String.class, "areaCode", false, "AREA_CODE");
        public final static Property LevelOrder = new Property(6, String.class, "levelOrder", false, "LEVEL_ORDER");
    };


    public Org_downDao(DaoConfig config) {
        super(config);
    }
    
    public Org_downDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORG_DOWN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ORG_CODE\" TEXT," + // 1: orgCode
                "\"ORG_NAME\" TEXT," + // 2: orgName
                "\"ORG_TYPE\" TEXT," + // 3: orgType
                "\"PARENT_ORG_CODE\" TEXT," + // 4: parentOrgCode
                "\"AREA_CODE\" TEXT," + // 5: areaCode
                "\"LEVEL_ORDER\" TEXT);"); // 6: levelOrder
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORG_DOWN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Org_down entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orgCode = entity.getOrgCode();
        if (orgCode != null) {
            stmt.bindString(2, orgCode);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(3, orgName);
        }
 
        String orgType = entity.getOrgType();
        if (orgType != null) {
            stmt.bindString(4, orgType);
        }
 
        String parentOrgCode = entity.getParentOrgCode();
        if (parentOrgCode != null) {
            stmt.bindString(5, parentOrgCode);
        }
 
        String areaCode = entity.getAreaCode();
        if (areaCode != null) {
            stmt.bindString(6, areaCode);
        }
 
        String levelOrder = entity.getLevelOrder();
        if (levelOrder != null) {
            stmt.bindString(7, levelOrder);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Org_down readEntity(Cursor cursor, int offset) {
        Org_down entity = new Org_down( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orgCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // orgName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // orgType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // parentOrgCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // areaCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // levelOrder
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Org_down entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrgCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrgName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrgType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setParentOrgCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAreaCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLevelOrder(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Org_down entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Org_down entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
