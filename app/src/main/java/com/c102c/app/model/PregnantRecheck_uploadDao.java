package com.c102c.app.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.c102c.app.model.PregnantRecheck_upload;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PREGNANT_RECHECK_UPLOAD".
*/
public class PregnantRecheck_uploadDao extends AbstractDao<PregnantRecheck_upload, Long> {

    public static final String TABLENAME = "PREGNANT_RECHECK_UPLOAD";

    /**
     * Properties of entity PregnantRecheck_upload.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PersonId = new Property(1, String.class, "personId", false, "PERSON_ID");
        public final static Property SpecialNo = new Property(2, String.class, "specialNo", false, "SPECIAL_NO");
        public final static Property MachineCode = new Property(3, String.class, "machineCode", false, "MACHINE_CODE");
        public final static Property MachineNo = new Property(4, String.class, "machineNo", false, "MACHINE_NO");
        public final static Property PregnantManualNo = new Property(5, String.class, "pregnantManualNo", false, "PREGNANT_MANUAL_NO");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property AntenatalCareDate = new Property(7, String.class, "antenatalCareDate", false, "ANTENATAL_CARE_DATE");
        public final static Property GestationalWeeks = new Property(8, String.class, "gestationalWeeks", false, "GESTATIONAL_WEEKS");
        public final static Property ChiefComplaint = new Property(9, String.class, "chiefComplaint", false, "CHIEF_COMPLAINT");
        public final static Property Weight = new Property(10, String.class, "weight", false, "WEIGHT");
        public final static Property FundusHeight = new Property(11, String.class, "fundusHeight", false, "FUNDUS_HEIGHT");
        public final static Property AbdominalCircumference = new Property(12, String.class, "abdominalCircumference", false, "ABDOMINAL_CIRCUMFERENCE");
        public final static Property FoetalCirculationCode = new Property(13, String.class, "foetalCirculationCode", false, "FOETAL_CIRCULATION_CODE");
        public final static Property FetalHeartRate = new Property(14, String.class, "fetalHeartRate", false, "FETAL_HEART_RATE");
        public final static Property SBP = new Property(15, String.class, "SBP", false, "SBP");
        public final static Property DBP = new Property(16, String.class, "DBP", false, "DBP");
        public final static Property Hemoglobin = new Property(17, String.class, "hemoglobin", false, "HEMOGLOBIN");
        public final static Property Leucocyte = new Property(18, String.class, "leucocyte", false, "LEUCOCYTE");
        public final static Property CheckOther = new Property(19, String.class, "checkOther", false, "CHECK_OTHER");
        public final static Property TypeCode = new Property(20, String.class, "typeCode", false, "TYPE_CODE");
        public final static Property TypeDesc = new Property(21, String.class, "typeDesc", false, "TYPE_DESC");
        public final static Property GuideCodes = new Property(22, String.class, "guideCodes", false, "GUIDE_CODES");
        public final static Property GuideOther = new Property(23, String.class, "guideOther", false, "GUIDE_OTHER");
        public final static Property ReferralCode = new Property(24, String.class, "referralCode", false, "REFERRAL_CODE");
        public final static Property ReferralReason = new Property(25, String.class, "referralReason", false, "REFERRAL_REASON");
        public final static Property ReferralOrg = new Property(26, String.class, "referralOrg", false, "REFERRAL_ORG");
        public final static Property ReferralDepartment = new Property(27, String.class, "referralDepartment", false, "REFERRAL_DEPARTMENT");
        public final static Property CheckDoctorCode = new Property(28, String.class, "checkDoctorCode", false, "CHECK_DOCTOR_CODE");
        public final static Property CheckDoctorName = new Property(29, String.class, "checkDoctorName", false, "CHECK_DOCTOR_NAME");
        public final static Property CheckOrgCode = new Property(30, String.class, "checkOrgCode", false, "CHECK_ORG_CODE");
        public final static Property CheckOrgName = new Property(31, String.class, "checkOrgName", false, "CHECK_ORG_NAME");
        public final static Property NextFlupDate = new Property(32, String.class, "nextFlupDate", false, "NEXT_FLUP_DATE");
    };


    public PregnantRecheck_uploadDao(DaoConfig config) {
        super(config);
    }
    
    public PregnantRecheck_uploadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PREGNANT_RECHECK_UPLOAD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PERSON_ID\" TEXT," + // 1: personId
                "\"SPECIAL_NO\" TEXT," + // 2: specialNo
                "\"MACHINE_CODE\" TEXT," + // 3: machineCode
                "\"MACHINE_NO\" TEXT," + // 4: machineNo
                "\"PREGNANT_MANUAL_NO\" TEXT," + // 5: pregnantManualNo
                "\"NAME\" TEXT," + // 6: name
                "\"ANTENATAL_CARE_DATE\" TEXT," + // 7: antenatalCareDate
                "\"GESTATIONAL_WEEKS\" TEXT," + // 8: gestationalWeeks
                "\"CHIEF_COMPLAINT\" TEXT," + // 9: chiefComplaint
                "\"WEIGHT\" TEXT," + // 10: weight
                "\"FUNDUS_HEIGHT\" TEXT," + // 11: fundusHeight
                "\"ABDOMINAL_CIRCUMFERENCE\" TEXT," + // 12: abdominalCircumference
                "\"FOETAL_CIRCULATION_CODE\" TEXT," + // 13: foetalCirculationCode
                "\"FETAL_HEART_RATE\" TEXT," + // 14: fetalHeartRate
                "\"SBP\" TEXT," + // 15: SBP
                "\"DBP\" TEXT," + // 16: DBP
                "\"HEMOGLOBIN\" TEXT," + // 17: hemoglobin
                "\"LEUCOCYTE\" TEXT," + // 18: leucocyte
                "\"CHECK_OTHER\" TEXT," + // 19: checkOther
                "\"TYPE_CODE\" TEXT," + // 20: typeCode
                "\"TYPE_DESC\" TEXT," + // 21: typeDesc
                "\"GUIDE_CODES\" TEXT," + // 22: guideCodes
                "\"GUIDE_OTHER\" TEXT," + // 23: guideOther
                "\"REFERRAL_CODE\" TEXT," + // 24: referralCode
                "\"REFERRAL_REASON\" TEXT," + // 25: referralReason
                "\"REFERRAL_ORG\" TEXT," + // 26: referralOrg
                "\"REFERRAL_DEPARTMENT\" TEXT," + // 27: referralDepartment
                "\"CHECK_DOCTOR_CODE\" TEXT," + // 28: checkDoctorCode
                "\"CHECK_DOCTOR_NAME\" TEXT," + // 29: checkDoctorName
                "\"CHECK_ORG_CODE\" TEXT," + // 30: checkOrgCode
                "\"CHECK_ORG_NAME\" TEXT," + // 31: checkOrgName
                "\"NEXT_FLUP_DATE\" TEXT);"); // 32: nextFlupDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PREGNANT_RECHECK_UPLOAD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PregnantRecheck_upload entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(2, personId);
        }
 
        String specialNo = entity.getSpecialNo();
        if (specialNo != null) {
            stmt.bindString(3, specialNo);
        }
 
        String machineCode = entity.getMachineCode();
        if (machineCode != null) {
            stmt.bindString(4, machineCode);
        }
 
        String machineNo = entity.getMachineNo();
        if (machineNo != null) {
            stmt.bindString(5, machineNo);
        }
 
        String pregnantManualNo = entity.getPregnantManualNo();
        if (pregnantManualNo != null) {
            stmt.bindString(6, pregnantManualNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String antenatalCareDate = entity.getAntenatalCareDate();
        if (antenatalCareDate != null) {
            stmt.bindString(8, antenatalCareDate);
        }
 
        String gestationalWeeks = entity.getGestationalWeeks();
        if (gestationalWeeks != null) {
            stmt.bindString(9, gestationalWeeks);
        }
 
        String chiefComplaint = entity.getChiefComplaint();
        if (chiefComplaint != null) {
            stmt.bindString(10, chiefComplaint);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(11, weight);
        }
 
        String fundusHeight = entity.getFundusHeight();
        if (fundusHeight != null) {
            stmt.bindString(12, fundusHeight);
        }
 
        String abdominalCircumference = entity.getAbdominalCircumference();
        if (abdominalCircumference != null) {
            stmt.bindString(13, abdominalCircumference);
        }
 
        String foetalCirculationCode = entity.getFoetalCirculationCode();
        if (foetalCirculationCode != null) {
            stmt.bindString(14, foetalCirculationCode);
        }
 
        String fetalHeartRate = entity.getFetalHeartRate();
        if (fetalHeartRate != null) {
            stmt.bindString(15, fetalHeartRate);
        }
 
        String SBP = entity.getSBP();
        if (SBP != null) {
            stmt.bindString(16, SBP);
        }
 
        String DBP = entity.getDBP();
        if (DBP != null) {
            stmt.bindString(17, DBP);
        }
 
        String hemoglobin = entity.getHemoglobin();
        if (hemoglobin != null) {
            stmt.bindString(18, hemoglobin);
        }
 
        String leucocyte = entity.getLeucocyte();
        if (leucocyte != null) {
            stmt.bindString(19, leucocyte);
        }
 
        String checkOther = entity.getCheckOther();
        if (checkOther != null) {
            stmt.bindString(20, checkOther);
        }
 
        String typeCode = entity.getTypeCode();
        if (typeCode != null) {
            stmt.bindString(21, typeCode);
        }
 
        String typeDesc = entity.getTypeDesc();
        if (typeDesc != null) {
            stmt.bindString(22, typeDesc);
        }
 
        String guideCodes = entity.getGuideCodes();
        if (guideCodes != null) {
            stmt.bindString(23, guideCodes);
        }
 
        String guideOther = entity.getGuideOther();
        if (guideOther != null) {
            stmt.bindString(24, guideOther);
        }
 
        String referralCode = entity.getReferralCode();
        if (referralCode != null) {
            stmt.bindString(25, referralCode);
        }
 
        String referralReason = entity.getReferralReason();
        if (referralReason != null) {
            stmt.bindString(26, referralReason);
        }
 
        String referralOrg = entity.getReferralOrg();
        if (referralOrg != null) {
            stmt.bindString(27, referralOrg);
        }
 
        String referralDepartment = entity.getReferralDepartment();
        if (referralDepartment != null) {
            stmt.bindString(28, referralDepartment);
        }
 
        String checkDoctorCode = entity.getCheckDoctorCode();
        if (checkDoctorCode != null) {
            stmt.bindString(29, checkDoctorCode);
        }
 
        String checkDoctorName = entity.getCheckDoctorName();
        if (checkDoctorName != null) {
            stmt.bindString(30, checkDoctorName);
        }
 
        String checkOrgCode = entity.getCheckOrgCode();
        if (checkOrgCode != null) {
            stmt.bindString(31, checkOrgCode);
        }
 
        String checkOrgName = entity.getCheckOrgName();
        if (checkOrgName != null) {
            stmt.bindString(32, checkOrgName);
        }
 
        String nextFlupDate = entity.getNextFlupDate();
        if (nextFlupDate != null) {
            stmt.bindString(33, nextFlupDate);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PregnantRecheck_upload readEntity(Cursor cursor, int offset) {
        PregnantRecheck_upload entity = new PregnantRecheck_upload( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // specialNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // machineCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // machineNo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pregnantManualNo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // antenatalCareDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // gestationalWeeks
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // chiefComplaint
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // weight
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // fundusHeight
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // abdominalCircumference
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // foetalCirculationCode
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // fetalHeartRate
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // SBP
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // DBP
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // hemoglobin
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // leucocyte
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // checkOther
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // typeCode
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // typeDesc
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // guideCodes
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // guideOther
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // referralCode
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // referralReason
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // referralOrg
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // referralDepartment
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // checkDoctorCode
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // checkDoctorName
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // checkOrgCode
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // checkOrgName
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32) // nextFlupDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PregnantRecheck_upload entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPersonId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSpecialNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMachineCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMachineNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPregnantManualNo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAntenatalCareDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGestationalWeeks(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setChiefComplaint(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWeight(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFundusHeight(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAbdominalCircumference(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFoetalCirculationCode(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setFetalHeartRate(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSBP(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDBP(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setHemoglobin(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setLeucocyte(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCheckOther(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setTypeCode(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setTypeDesc(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setGuideCodes(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setGuideOther(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setReferralCode(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setReferralReason(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setReferralOrg(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setReferralDepartment(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setCheckDoctorCode(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setCheckDoctorName(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setCheckOrgCode(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setCheckOrgName(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setNextFlupDate(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PregnantRecheck_upload entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PregnantRecheck_upload entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
