package com.c102c.app.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.c102c.app.model.HypertensionFlup_down;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HYPERTENSION_FLUP_DOWN".
*/
public class HypertensionFlup_downDao extends AbstractDao<HypertensionFlup_down, String> {

    public static final String TABLENAME = "HYPERTENSION_FLUP_DOWN";

    /**
     * Properties of entity HypertensionFlup_down.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property BusinessKey = new Property(0, String.class, "businessKey", true, "BUSINESS_KEY");
        public final static Property SpecialNo = new Property(1, String.class, "specialNo", false, "SPECIAL_NO");
        public final static Property PersonId = new Property(2, String.class, "personId", false, "PERSON_ID");
        public final static Property BloodPressureLevel = new Property(3, String.class, "bloodPressureLevel", false, "BLOOD_PRESSURE_LEVEL");
        public final static Property HealthFileNumber = new Property(4, String.class, "healthFileNumber", false, "HEALTH_FILE_NUMBER");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property FlupDate = new Property(6, String.class, "flupDate", false, "FLUP_DATE");
        public final static Property FlupMode = new Property(7, String.class, "flupMode", false, "FLUP_MODE");
        public final static Property SymptomCodes = new Property(8, String.class, "symptomCodes", false, "SYMPTOM_CODES");
        public final static Property SymptomOther = new Property(9, String.class, "symptomOther", false, "SYMPTOM_OTHER");
        public final static Property SBP = new Property(10, String.class, "SBP", false, "SBP");
        public final static Property DBP = new Property(11, String.class, "DBP", false, "DBP");
        public final static Property Weight = new Property(12, String.class, "weight", false, "WEIGHT");
        public final static Property WeightTarget = new Property(13, String.class, "weightTarget", false, "WEIGHT_TARGET");
        public final static Property Bmi = new Property(14, String.class, "bmi", false, "BMI");
        public final static Property BmiTarget = new Property(15, String.class, "bmiTarget", false, "BMI_TARGET");
        public final static Property HeartRate = new Property(16, String.class, "heartRate", false, "HEART_RATE");
        public final static Property SignsOther = new Property(17, String.class, "signsOther", false, "SIGNS_OTHER");
        public final static Property DailySmoking = new Property(18, String.class, "dailySmoking", false, "DAILY_SMOKING");
        public final static Property DailySmokingTarget = new Property(19, String.class, "dailySmokingTarget", false, "DAILY_SMOKING_TARGET");
        public final static Property DailyDrinking = new Property(20, String.class, "dailyDrinking", false, "DAILY_DRINKING");
        public final static Property DailyDrinkingTarget = new Property(21, String.class, "dailyDrinkingTarget", false, "DAILY_DRINKING_TARGET");
        public final static Property PerWeekMovements = new Property(22, String.class, "perWeekMovements", false, "PER_WEEK_MOVEMENTS");
        public final static Property PerWeekMovementsTarget = new Property(23, String.class, "perWeekMovementsTarget", false, "PER_WEEK_MOVEMENTS_TARGET");
        public final static Property PerWeekTimes = new Property(24, String.class, "perWeekTimes", false, "PER_WEEK_TIMES");
        public final static Property PerWeekTimesTarget = new Property(25, String.class, "perWeekTimesTarget", false, "PER_WEEK_TIMES_TARGET");
        public final static Property SaltIntakeCode = new Property(26, String.class, "saltIntakeCode", false, "SALT_INTAKE_CODE");
        public final static Property SaltIntakeTargetCode = new Property(27, String.class, "saltIntakeTargetCode", false, "SALT_INTAKE_TARGET_CODE");
        public final static Property PsychologicalCode = new Property(28, String.class, "psychologicalCode", false, "PSYCHOLOGICAL_CODE");
        public final static Property ComplianceCode = new Property(29, String.class, "complianceCode", false, "COMPLIANCE_CODE");
        public final static Property AidCheck = new Property(30, String.class, "aidCheck", false, "AID_CHECK");
        public final static Property DoseCode = new Property(31, String.class, "doseCode", false, "DOSE_CODE");
        public final static Property AdverseReactionCode = new Property(32, String.class, "adverseReactionCode", false, "ADVERSE_REACTION_CODE");
        public final static Property FlupTypeCode = new Property(33, String.class, "flupTypeCode", false, "FLUP_TYPE_CODE");
        public final static Property MedicationList = new Property(34, String.class, "medicationList", false, "MEDICATION_LIST");
        public final static Property ReferralReason = new Property(35, String.class, "referralReason", false, "REFERRAL_REASON");
        public final static Property ReferralOrg = new Property(36, String.class, "referralOrg", false, "REFERRAL_ORG");
        public final static Property ReferralDepartment = new Property(37, String.class, "referralDepartment", false, "REFERRAL_DEPARTMENT");
        public final static Property FlupDoctorCode = new Property(38, String.class, "flupDoctorCode", false, "FLUP_DOCTOR_CODE");
        public final static Property FlupDoctorName = new Property(39, String.class, "flupDoctorName", false, "FLUP_DOCTOR_NAME");
        public final static Property FlupOrgCode = new Property(40, String.class, "flupOrgCode", false, "FLUP_ORG_CODE");
        public final static Property FlupOrgName = new Property(41, String.class, "flupOrgName", false, "FLUP_ORG_NAME");
        public final static Property NextFlupDate = new Property(42, String.class, "nextFlupDate", false, "NEXT_FLUP_DATE");
        public final static Property DrugDosage = new Property(43, String.class, "drugDosage", false, "DRUG_DOSAGE");
        public final static Property DrugDosageAdd = new Property(44, String.class, "drugDosageAdd", false, "DRUG_DOSAGE_ADD");
    };


    public HypertensionFlup_downDao(DaoConfig config) {
        super(config);
    }
    
    public HypertensionFlup_downDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HYPERTENSION_FLUP_DOWN\" (" + //
                "\"BUSINESS_KEY\" TEXT PRIMARY KEY NOT NULL ," + // 0: businessKey
                "\"SPECIAL_NO\" TEXT," + // 1: specialNo
                "\"PERSON_ID\" TEXT," + // 2: personId
                "\"BLOOD_PRESSURE_LEVEL\" TEXT," + // 3: bloodPressureLevel
                "\"HEALTH_FILE_NUMBER\" TEXT," + // 4: healthFileNumber
                "\"NAME\" TEXT," + // 5: name
                "\"FLUP_DATE\" TEXT," + // 6: flupDate
                "\"FLUP_MODE\" TEXT," + // 7: flupMode
                "\"SYMPTOM_CODES\" TEXT," + // 8: symptomCodes
                "\"SYMPTOM_OTHER\" TEXT," + // 9: symptomOther
                "\"SBP\" TEXT," + // 10: SBP
                "\"DBP\" TEXT," + // 11: DBP
                "\"WEIGHT\" TEXT," + // 12: weight
                "\"WEIGHT_TARGET\" TEXT," + // 13: weightTarget
                "\"BMI\" TEXT," + // 14: bmi
                "\"BMI_TARGET\" TEXT," + // 15: bmiTarget
                "\"HEART_RATE\" TEXT," + // 16: heartRate
                "\"SIGNS_OTHER\" TEXT," + // 17: signsOther
                "\"DAILY_SMOKING\" TEXT," + // 18: dailySmoking
                "\"DAILY_SMOKING_TARGET\" TEXT," + // 19: dailySmokingTarget
                "\"DAILY_DRINKING\" TEXT," + // 20: dailyDrinking
                "\"DAILY_DRINKING_TARGET\" TEXT," + // 21: dailyDrinkingTarget
                "\"PER_WEEK_MOVEMENTS\" TEXT," + // 22: perWeekMovements
                "\"PER_WEEK_MOVEMENTS_TARGET\" TEXT," + // 23: perWeekMovementsTarget
                "\"PER_WEEK_TIMES\" TEXT," + // 24: perWeekTimes
                "\"PER_WEEK_TIMES_TARGET\" TEXT," + // 25: perWeekTimesTarget
                "\"SALT_INTAKE_CODE\" TEXT," + // 26: saltIntakeCode
                "\"SALT_INTAKE_TARGET_CODE\" TEXT," + // 27: saltIntakeTargetCode
                "\"PSYCHOLOGICAL_CODE\" TEXT," + // 28: psychologicalCode
                "\"COMPLIANCE_CODE\" TEXT," + // 29: complianceCode
                "\"AID_CHECK\" TEXT," + // 30: aidCheck
                "\"DOSE_CODE\" TEXT," + // 31: doseCode
                "\"ADVERSE_REACTION_CODE\" TEXT," + // 32: adverseReactionCode
                "\"FLUP_TYPE_CODE\" TEXT," + // 33: flupTypeCode
                "\"MEDICATION_LIST\" TEXT," + // 34: medicationList
                "\"REFERRAL_REASON\" TEXT," + // 35: referralReason
                "\"REFERRAL_ORG\" TEXT," + // 36: referralOrg
                "\"REFERRAL_DEPARTMENT\" TEXT," + // 37: referralDepartment
                "\"FLUP_DOCTOR_CODE\" TEXT," + // 38: flupDoctorCode
                "\"FLUP_DOCTOR_NAME\" TEXT," + // 39: flupDoctorName
                "\"FLUP_ORG_CODE\" TEXT," + // 40: flupOrgCode
                "\"FLUP_ORG_NAME\" TEXT," + // 41: flupOrgName
                "\"NEXT_FLUP_DATE\" TEXT," + // 42: nextFlupDate
                "\"DRUG_DOSAGE\" TEXT," + // 43: drugDosage
                "\"DRUG_DOSAGE_ADD\" TEXT);"); // 44: drugDosageAdd
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HYPERTENSION_FLUP_DOWN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HypertensionFlup_down entity) {
        stmt.clearBindings();
 
        String businessKey = entity.getBusinessKey();
        if (businessKey != null) {
            stmt.bindString(1, businessKey);
        }
 
        String specialNo = entity.getSpecialNo();
        if (specialNo != null) {
            stmt.bindString(2, specialNo);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(3, personId);
        }
 
        String bloodPressureLevel = entity.getBloodPressureLevel();
        if (bloodPressureLevel != null) {
            stmt.bindString(4, bloodPressureLevel);
        }
 
        String healthFileNumber = entity.getHealthFileNumber();
        if (healthFileNumber != null) {
            stmt.bindString(5, healthFileNumber);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String flupDate = entity.getFlupDate();
        if (flupDate != null) {
            stmt.bindString(7, flupDate);
        }
 
        String flupMode = entity.getFlupMode();
        if (flupMode != null) {
            stmt.bindString(8, flupMode);
        }
 
        String symptomCodes = entity.getSymptomCodes();
        if (symptomCodes != null) {
            stmt.bindString(9, symptomCodes);
        }
 
        String symptomOther = entity.getSymptomOther();
        if (symptomOther != null) {
            stmt.bindString(10, symptomOther);
        }
 
        String SBP = entity.getSBP();
        if (SBP != null) {
            stmt.bindString(11, SBP);
        }
 
        String DBP = entity.getDBP();
        if (DBP != null) {
            stmt.bindString(12, DBP);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(13, weight);
        }
 
        String weightTarget = entity.getWeightTarget();
        if (weightTarget != null) {
            stmt.bindString(14, weightTarget);
        }
 
        String bmi = entity.getBmi();
        if (bmi != null) {
            stmt.bindString(15, bmi);
        }
 
        String bmiTarget = entity.getBmiTarget();
        if (bmiTarget != null) {
            stmt.bindString(16, bmiTarget);
        }
 
        String heartRate = entity.getHeartRate();
        if (heartRate != null) {
            stmt.bindString(17, heartRate);
        }
 
        String signsOther = entity.getSignsOther();
        if (signsOther != null) {
            stmt.bindString(18, signsOther);
        }
 
        String dailySmoking = entity.getDailySmoking();
        if (dailySmoking != null) {
            stmt.bindString(19, dailySmoking);
        }
 
        String dailySmokingTarget = entity.getDailySmokingTarget();
        if (dailySmokingTarget != null) {
            stmt.bindString(20, dailySmokingTarget);
        }
 
        String dailyDrinking = entity.getDailyDrinking();
        if (dailyDrinking != null) {
            stmt.bindString(21, dailyDrinking);
        }
 
        String dailyDrinkingTarget = entity.getDailyDrinkingTarget();
        if (dailyDrinkingTarget != null) {
            stmt.bindString(22, dailyDrinkingTarget);
        }
 
        String perWeekMovements = entity.getPerWeekMovements();
        if (perWeekMovements != null) {
            stmt.bindString(23, perWeekMovements);
        }
 
        String perWeekMovementsTarget = entity.getPerWeekMovementsTarget();
        if (perWeekMovementsTarget != null) {
            stmt.bindString(24, perWeekMovementsTarget);
        }
 
        String perWeekTimes = entity.getPerWeekTimes();
        if (perWeekTimes != null) {
            stmt.bindString(25, perWeekTimes);
        }
 
        String perWeekTimesTarget = entity.getPerWeekTimesTarget();
        if (perWeekTimesTarget != null) {
            stmt.bindString(26, perWeekTimesTarget);
        }
 
        String saltIntakeCode = entity.getSaltIntakeCode();
        if (saltIntakeCode != null) {
            stmt.bindString(27, saltIntakeCode);
        }
 
        String saltIntakeTargetCode = entity.getSaltIntakeTargetCode();
        if (saltIntakeTargetCode != null) {
            stmt.bindString(28, saltIntakeTargetCode);
        }
 
        String psychologicalCode = entity.getPsychologicalCode();
        if (psychologicalCode != null) {
            stmt.bindString(29, psychologicalCode);
        }
 
        String complianceCode = entity.getComplianceCode();
        if (complianceCode != null) {
            stmt.bindString(30, complianceCode);
        }
 
        String aidCheck = entity.getAidCheck();
        if (aidCheck != null) {
            stmt.bindString(31, aidCheck);
        }
 
        String doseCode = entity.getDoseCode();
        if (doseCode != null) {
            stmt.bindString(32, doseCode);
        }
 
        String adverseReactionCode = entity.getAdverseReactionCode();
        if (adverseReactionCode != null) {
            stmt.bindString(33, adverseReactionCode);
        }
 
        String flupTypeCode = entity.getFlupTypeCode();
        if (flupTypeCode != null) {
            stmt.bindString(34, flupTypeCode);
        }
 
        String medicationList = entity.getMedicationList();
        if (medicationList != null) {
            stmt.bindString(35, medicationList);
        }
 
        String referralReason = entity.getReferralReason();
        if (referralReason != null) {
            stmt.bindString(36, referralReason);
        }
 
        String referralOrg = entity.getReferralOrg();
        if (referralOrg != null) {
            stmt.bindString(37, referralOrg);
        }
 
        String referralDepartment = entity.getReferralDepartment();
        if (referralDepartment != null) {
            stmt.bindString(38, referralDepartment);
        }
 
        String flupDoctorCode = entity.getFlupDoctorCode();
        if (flupDoctorCode != null) {
            stmt.bindString(39, flupDoctorCode);
        }
 
        String flupDoctorName = entity.getFlupDoctorName();
        if (flupDoctorName != null) {
            stmt.bindString(40, flupDoctorName);
        }
 
        String flupOrgCode = entity.getFlupOrgCode();
        if (flupOrgCode != null) {
            stmt.bindString(41, flupOrgCode);
        }
 
        String flupOrgName = entity.getFlupOrgName();
        if (flupOrgName != null) {
            stmt.bindString(42, flupOrgName);
        }
 
        String nextFlupDate = entity.getNextFlupDate();
        if (nextFlupDate != null) {
            stmt.bindString(43, nextFlupDate);
        }
 
        String drugDosage = entity.getDrugDosage();
        if (drugDosage != null) {
            stmt.bindString(44, drugDosage);
        }
 
        String drugDosageAdd = entity.getDrugDosageAdd();
        if (drugDosageAdd != null) {
            stmt.bindString(45, drugDosageAdd);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HypertensionFlup_down readEntity(Cursor cursor, int offset) {
        HypertensionFlup_down entity = new HypertensionFlup_down( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // businessKey
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // specialNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // personId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bloodPressureLevel
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // healthFileNumber
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // flupDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // flupMode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // symptomCodes
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // symptomOther
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // SBP
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // DBP
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // weight
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // weightTarget
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // bmi
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // bmiTarget
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // heartRate
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // signsOther
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // dailySmoking
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // dailySmokingTarget
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // dailyDrinking
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // dailyDrinkingTarget
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // perWeekMovements
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // perWeekMovementsTarget
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // perWeekTimes
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // perWeekTimesTarget
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // saltIntakeCode
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // saltIntakeTargetCode
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // psychologicalCode
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // complianceCode
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // aidCheck
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // doseCode
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // adverseReactionCode
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // flupTypeCode
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // medicationList
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // referralReason
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // referralOrg
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // referralDepartment
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // flupDoctorCode
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // flupDoctorName
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // flupOrgCode
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // flupOrgName
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // nextFlupDate
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // drugDosage
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44) // drugDosageAdd
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HypertensionFlup_down entity, int offset) {
        entity.setBusinessKey(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSpecialNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPersonId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBloodPressureLevel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHealthFileNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFlupDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFlupMode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSymptomCodes(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSymptomOther(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSBP(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDBP(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setWeight(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setWeightTarget(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBmi(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setBmiTarget(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setHeartRate(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSignsOther(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDailySmoking(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setDailySmokingTarget(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setDailyDrinking(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setDailyDrinkingTarget(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setPerWeekMovements(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setPerWeekMovementsTarget(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setPerWeekTimes(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setPerWeekTimesTarget(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setSaltIntakeCode(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setSaltIntakeTargetCode(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setPsychologicalCode(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setComplianceCode(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setAidCheck(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setDoseCode(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setAdverseReactionCode(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setFlupTypeCode(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setMedicationList(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setReferralReason(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setReferralOrg(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setReferralDepartment(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setFlupDoctorCode(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setFlupDoctorName(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setFlupOrgCode(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setFlupOrgName(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setNextFlupDate(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setDrugDosage(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setDrugDosageAdd(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(HypertensionFlup_down entity, long rowId) {
        return entity.getBusinessKey();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(HypertensionFlup_down entity) {
        if(entity != null) {
            return entity.getBusinessKey();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
