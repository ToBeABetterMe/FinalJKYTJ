package com.c102c.app.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.c102c.app.model.HealthRecord_down;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HEALTH_RECORD_DOWN".
*/
public class HealthRecord_downDao extends AbstractDao<HealthRecord_down, String> {

    public static final String TABLENAME = "HEALTH_RECORD_DOWN";

    /**
     * Properties of entity HealthRecord_down.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PersonId = new Property(0, String.class, "personId", true, "PERSON_ID");
        public final static Property NowLiveCode = new Property(1, String.class, "nowLiveCode", false, "NOW_LIVE_CODE");
        public final static Property NowLiveName = new Property(2, String.class, "nowLiveName", false, "NOW_LIVE_NAME");
        public final static Property NowLiveAddr = new Property(3, String.class, "nowLiveAddr", false, "NOW_LIVE_ADDR");
        public final static Property HouseholdRegisterCode = new Property(4, String.class, "householdRegisterCode", false, "HOUSEHOLD_REGISTER_CODE");
        public final static Property HouseholdRegisterName = new Property(5, String.class, "householdRegisterName", false, "HOUSEHOLD_REGISTER_NAME");
        public final static Property HouseholdRegisterAddr = new Property(6, String.class, "householdRegisterAddr", false, "HOUSEHOLD_REGISTER_ADDR");
        public final static Property RegisterOrgCode = new Property(7, String.class, "registerOrgCode", false, "REGISTER_ORG_CODE");
        public final static Property RegisterOrgName = new Property(8, String.class, "registerOrgName", false, "REGISTER_ORG_NAME");
        public final static Property ResponsibleDoctorCode = new Property(9, String.class, "responsibleDoctorCode", false, "RESPONSIBLE_DOCTOR_CODE");
        public final static Property ResponsibleDoctorName = new Property(10, String.class, "responsibleDoctorName", false, "RESPONSIBLE_DOCTOR_NAME");
        public final static Property RegisterDoctorCode = new Property(11, String.class, "registerDoctorCode", false, "REGISTER_DOCTOR_CODE");
        public final static Property RegisterDoctorName = new Property(12, String.class, "registerDoctorName", false, "REGISTER_DOCTOR_NAME");
        public final static Property RegisterDate = new Property(13, String.class, "registerDate", false, "REGISTER_DATE");
        public final static Property HealthFileNumber = new Property(14, String.class, "healthFileNumber", false, "HEALTH_FILE_NUMBER");
        public final static Property Name = new Property(15, String.class, "name", false, "NAME");
        public final static Property GenderCode = new Property(16, String.class, "genderCode", false, "GENDER_CODE");
        public final static Property Birthday = new Property(17, String.class, "birthday", false, "BIRTHDAY");
        public final static Property IdCard = new Property(18, String.class, "idCard", false, "ID_CARD");
        public final static Property WorkUnit = new Property(19, String.class, "workUnit", false, "WORK_UNIT");
        public final static Property Phone = new Property(20, String.class, "phone", false, "PHONE");
        public final static Property Contacts = new Property(21, String.class, "contacts", false, "CONTACTS");
        public final static Property ContactsPhone = new Property(22, String.class, "contactsPhone", false, "CONTACTS_PHONE");
        public final static Property ResidentType = new Property(23, String.class, "residentType", false, "RESIDENT_TYPE");
        public final static Property EthnicityCode = new Property(24, String.class, "ethnicityCode", false, "ETHNICITY_CODE");
        public final static Property EthnicityName = new Property(25, String.class, "ethnicityName", false, "ETHNICITY_NAME");
        public final static Property BloodGroupCode = new Property(26, String.class, "bloodGroupCode", false, "BLOOD_GROUP_CODE");
        public final static Property EduBGCode = new Property(27, String.class, "eduBGCode", false, "EDU_BGCODE");
        public final static Property OccupationCode = new Property(28, String.class, "occupationCode", false, "OCCUPATION_CODE");
        public final static Property MaritalStatusCode = new Property(29, String.class, "maritalStatusCode", false, "MARITAL_STATUS_CODE");
        public final static Property PaymentMethodCodes = new Property(30, String.class, "paymentMethodCodes", false, "PAYMENT_METHOD_CODES");
        public final static Property PaymentMethodOther = new Property(31, String.class, "paymentMethodOther", false, "PAYMENT_METHOD_OTHER");
        public final static Property DrugAllergyHistoryCodes = new Property(32, String.class, "drugAllergyHistoryCodes", false, "DRUG_ALLERGY_HISTORY_CODES");
        public final static Property DrugAllergyHistoryOther = new Property(33, String.class, "drugAllergyHistoryOther", false, "DRUG_ALLERGY_HISTORY_OTHER");
        public final static Property ExposureHistoryCodes = new Property(34, String.class, "exposureHistoryCodes", false, "EXPOSURE_HISTORY_CODES");
        public final static Property FamilyHistoryFatherCodes = new Property(35, String.class, "familyHistoryFatherCodes", false, "FAMILY_HISTORY_FATHER_CODES");
        public final static Property FamilyHistoryFatherOther = new Property(36, String.class, "familyHistoryFatherOther", false, "FAMILY_HISTORY_FATHER_OTHER");
        public final static Property FamilyHistoryMatherCodes = new Property(37, String.class, "familyHistoryMatherCodes", false, "FAMILY_HISTORY_MATHER_CODES");
        public final static Property FamilyHistoryMatherOther = new Property(38, String.class, "familyHistoryMatherOther", false, "FAMILY_HISTORY_MATHER_OTHER");
        public final static Property BrotherAndSisterCodes = new Property(39, String.class, "brotherAndSisterCodes", false, "BROTHER_AND_SISTER_CODES");
        public final static Property BrotherAndSisterOther = new Property(40, String.class, "brotherAndSisterOther", false, "BROTHER_AND_SISTER_OTHER");
        public final static Property FamilyHistoryChildrenCodes = new Property(41, String.class, "familyHistoryChildrenCodes", false, "FAMILY_HISTORY_CHILDREN_CODES");
        public final static Property FamilyHistoryChildrenOther = new Property(42, String.class, "familyHistoryChildrenOther", false, "FAMILY_HISTORY_CHILDREN_OTHER");
        public final static Property GeneticHistoryCode = new Property(43, String.class, "geneticHistoryCode", false, "GENETIC_HISTORY_CODE");
        public final static Property GeneticHistoryOther = new Property(44, String.class, "geneticHistoryOther", false, "GENETIC_HISTORY_OTHER");
        public final static Property DisabilityCodes = new Property(45, String.class, "disabilityCodes", false, "DISABILITY_CODES");
        public final static Property DisabilityOther = new Property(46, String.class, "disabilityOther", false, "DISABILITY_OTHER");
        public final static Property KitchenExhaustCode = new Property(47, String.class, "kitchenExhaustCode", false, "KITCHEN_EXHAUST_CODE");
        public final static Property FuelTypeCode = new Property(48, String.class, "fuelTypeCode", false, "FUEL_TYPE_CODE");
        public final static Property WaterCode = new Property(49, String.class, "waterCode", false, "WATER_CODE");
        public final static Property ToiletCode = new Property(50, String.class, "toiletCode", false, "TOILET_CODE");
        public final static Property LivestockColumnCode = new Property(51, String.class, "livestockColumnCode", false, "LIVESTOCK_COLUMN_CODE");
        public final static Property PastHistoryList = new Property(52, String.class, "pastHistoryList", false, "PAST_HISTORY_LIST");
        public final static Property RhBloodGroupCode = new Property(53, String.class, "rhBloodGroupCode", false, "RH_BLOOD_GROUP_CODE");
    };


    public HealthRecord_downDao(DaoConfig config) {
        super(config);
    }
    
    public HealthRecord_downDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HEALTH_RECORD_DOWN\" (" + //
                "\"PERSON_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: personId
                "\"NOW_LIVE_CODE\" TEXT," + // 1: nowLiveCode
                "\"NOW_LIVE_NAME\" TEXT," + // 2: nowLiveName
                "\"NOW_LIVE_ADDR\" TEXT," + // 3: nowLiveAddr
                "\"HOUSEHOLD_REGISTER_CODE\" TEXT," + // 4: householdRegisterCode
                "\"HOUSEHOLD_REGISTER_NAME\" TEXT," + // 5: householdRegisterName
                "\"HOUSEHOLD_REGISTER_ADDR\" TEXT," + // 6: householdRegisterAddr
                "\"REGISTER_ORG_CODE\" TEXT," + // 7: registerOrgCode
                "\"REGISTER_ORG_NAME\" TEXT," + // 8: registerOrgName
                "\"RESPONSIBLE_DOCTOR_CODE\" TEXT," + // 9: responsibleDoctorCode
                "\"RESPONSIBLE_DOCTOR_NAME\" TEXT," + // 10: responsibleDoctorName
                "\"REGISTER_DOCTOR_CODE\" TEXT," + // 11: registerDoctorCode
                "\"REGISTER_DOCTOR_NAME\" TEXT," + // 12: registerDoctorName
                "\"REGISTER_DATE\" TEXT," + // 13: registerDate
                "\"HEALTH_FILE_NUMBER\" TEXT," + // 14: healthFileNumber
                "\"NAME\" TEXT," + // 15: name
                "\"GENDER_CODE\" TEXT," + // 16: genderCode
                "\"BIRTHDAY\" TEXT," + // 17: birthday
                "\"ID_CARD\" TEXT," + // 18: idCard
                "\"WORK_UNIT\" TEXT," + // 19: workUnit
                "\"PHONE\" TEXT," + // 20: phone
                "\"CONTACTS\" TEXT," + // 21: contacts
                "\"CONTACTS_PHONE\" TEXT," + // 22: contactsPhone
                "\"RESIDENT_TYPE\" TEXT," + // 23: residentType
                "\"ETHNICITY_CODE\" TEXT," + // 24: ethnicityCode
                "\"ETHNICITY_NAME\" TEXT," + // 25: ethnicityName
                "\"BLOOD_GROUP_CODE\" TEXT," + // 26: bloodGroupCode
                "\"EDU_BGCODE\" TEXT," + // 27: eduBGCode
                "\"OCCUPATION_CODE\" TEXT," + // 28: occupationCode
                "\"MARITAL_STATUS_CODE\" TEXT," + // 29: maritalStatusCode
                "\"PAYMENT_METHOD_CODES\" TEXT," + // 30: paymentMethodCodes
                "\"PAYMENT_METHOD_OTHER\" TEXT," + // 31: paymentMethodOther
                "\"DRUG_ALLERGY_HISTORY_CODES\" TEXT," + // 32: drugAllergyHistoryCodes
                "\"DRUG_ALLERGY_HISTORY_OTHER\" TEXT," + // 33: drugAllergyHistoryOther
                "\"EXPOSURE_HISTORY_CODES\" TEXT," + // 34: exposureHistoryCodes
                "\"FAMILY_HISTORY_FATHER_CODES\" TEXT," + // 35: familyHistoryFatherCodes
                "\"FAMILY_HISTORY_FATHER_OTHER\" TEXT," + // 36: familyHistoryFatherOther
                "\"FAMILY_HISTORY_MATHER_CODES\" TEXT," + // 37: familyHistoryMatherCodes
                "\"FAMILY_HISTORY_MATHER_OTHER\" TEXT," + // 38: familyHistoryMatherOther
                "\"BROTHER_AND_SISTER_CODES\" TEXT," + // 39: brotherAndSisterCodes
                "\"BROTHER_AND_SISTER_OTHER\" TEXT," + // 40: brotherAndSisterOther
                "\"FAMILY_HISTORY_CHILDREN_CODES\" TEXT," + // 41: familyHistoryChildrenCodes
                "\"FAMILY_HISTORY_CHILDREN_OTHER\" TEXT," + // 42: familyHistoryChildrenOther
                "\"GENETIC_HISTORY_CODE\" TEXT," + // 43: geneticHistoryCode
                "\"GENETIC_HISTORY_OTHER\" TEXT," + // 44: geneticHistoryOther
                "\"DISABILITY_CODES\" TEXT," + // 45: disabilityCodes
                "\"DISABILITY_OTHER\" TEXT," + // 46: disabilityOther
                "\"KITCHEN_EXHAUST_CODE\" TEXT," + // 47: kitchenExhaustCode
                "\"FUEL_TYPE_CODE\" TEXT," + // 48: fuelTypeCode
                "\"WATER_CODE\" TEXT," + // 49: waterCode
                "\"TOILET_CODE\" TEXT," + // 50: toiletCode
                "\"LIVESTOCK_COLUMN_CODE\" TEXT," + // 51: livestockColumnCode
                "\"PAST_HISTORY_LIST\" TEXT," + // 52: pastHistoryList
                "\"RH_BLOOD_GROUP_CODE\" TEXT);"); // 53: rhBloodGroupCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HEALTH_RECORD_DOWN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HealthRecord_down entity) {
        stmt.clearBindings();
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(1, personId);
        }
 
        String nowLiveCode = entity.getNowLiveCode();
        if (nowLiveCode != null) {
            stmt.bindString(2, nowLiveCode);
        }
 
        String nowLiveName = entity.getNowLiveName();
        if (nowLiveName != null) {
            stmt.bindString(3, nowLiveName);
        }
 
        String nowLiveAddr = entity.getNowLiveAddr();
        if (nowLiveAddr != null) {
            stmt.bindString(4, nowLiveAddr);
        }
 
        String householdRegisterCode = entity.getHouseholdRegisterCode();
        if (householdRegisterCode != null) {
            stmt.bindString(5, householdRegisterCode);
        }
 
        String householdRegisterName = entity.getHouseholdRegisterName();
        if (householdRegisterName != null) {
            stmt.bindString(6, householdRegisterName);
        }
 
        String householdRegisterAddr = entity.getHouseholdRegisterAddr();
        if (householdRegisterAddr != null) {
            stmt.bindString(7, householdRegisterAddr);
        }
 
        String registerOrgCode = entity.getRegisterOrgCode();
        if (registerOrgCode != null) {
            stmt.bindString(8, registerOrgCode);
        }
 
        String registerOrgName = entity.getRegisterOrgName();
        if (registerOrgName != null) {
            stmt.bindString(9, registerOrgName);
        }
 
        String responsibleDoctorCode = entity.getResponsibleDoctorCode();
        if (responsibleDoctorCode != null) {
            stmt.bindString(10, responsibleDoctorCode);
        }
 
        String responsibleDoctorName = entity.getResponsibleDoctorName();
        if (responsibleDoctorName != null) {
            stmt.bindString(11, responsibleDoctorName);
        }
 
        String registerDoctorCode = entity.getRegisterDoctorCode();
        if (registerDoctorCode != null) {
            stmt.bindString(12, registerDoctorCode);
        }
 
        String registerDoctorName = entity.getRegisterDoctorName();
        if (registerDoctorName != null) {
            stmt.bindString(13, registerDoctorName);
        }
 
        String registerDate = entity.getRegisterDate();
        if (registerDate != null) {
            stmt.bindString(14, registerDate);
        }
 
        String healthFileNumber = entity.getHealthFileNumber();
        if (healthFileNumber != null) {
            stmt.bindString(15, healthFileNumber);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(16, name);
        }
 
        String genderCode = entity.getGenderCode();
        if (genderCode != null) {
            stmt.bindString(17, genderCode);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(18, birthday);
        }
 
        String idCard = entity.getIdCard();
        if (idCard != null) {
            stmt.bindString(19, idCard);
        }
 
        String workUnit = entity.getWorkUnit();
        if (workUnit != null) {
            stmt.bindString(20, workUnit);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(21, phone);
        }
 
        String contacts = entity.getContacts();
        if (contacts != null) {
            stmt.bindString(22, contacts);
        }
 
        String contactsPhone = entity.getContactsPhone();
        if (contactsPhone != null) {
            stmt.bindString(23, contactsPhone);
        }
 
        String residentType = entity.getResidentType();
        if (residentType != null) {
            stmt.bindString(24, residentType);
        }
 
        String ethnicityCode = entity.getEthnicityCode();
        if (ethnicityCode != null) {
            stmt.bindString(25, ethnicityCode);
        }
 
        String ethnicityName = entity.getEthnicityName();
        if (ethnicityName != null) {
            stmt.bindString(26, ethnicityName);
        }
 
        String bloodGroupCode = entity.getBloodGroupCode();
        if (bloodGroupCode != null) {
            stmt.bindString(27, bloodGroupCode);
        }
 
        String eduBGCode = entity.getEduBGCode();
        if (eduBGCode != null) {
            stmt.bindString(28, eduBGCode);
        }
 
        String occupationCode = entity.getOccupationCode();
        if (occupationCode != null) {
            stmt.bindString(29, occupationCode);
        }
 
        String maritalStatusCode = entity.getMaritalStatusCode();
        if (maritalStatusCode != null) {
            stmt.bindString(30, maritalStatusCode);
        }
 
        String paymentMethodCodes = entity.getPaymentMethodCodes();
        if (paymentMethodCodes != null) {
            stmt.bindString(31, paymentMethodCodes);
        }
 
        String paymentMethodOther = entity.getPaymentMethodOther();
        if (paymentMethodOther != null) {
            stmt.bindString(32, paymentMethodOther);
        }
 
        String drugAllergyHistoryCodes = entity.getDrugAllergyHistoryCodes();
        if (drugAllergyHistoryCodes != null) {
            stmt.bindString(33, drugAllergyHistoryCodes);
        }
 
        String drugAllergyHistoryOther = entity.getDrugAllergyHistoryOther();
        if (drugAllergyHistoryOther != null) {
            stmt.bindString(34, drugAllergyHistoryOther);
        }
 
        String exposureHistoryCodes = entity.getExposureHistoryCodes();
        if (exposureHistoryCodes != null) {
            stmt.bindString(35, exposureHistoryCodes);
        }
 
        String familyHistoryFatherCodes = entity.getFamilyHistoryFatherCodes();
        if (familyHistoryFatherCodes != null) {
            stmt.bindString(36, familyHistoryFatherCodes);
        }
 
        String familyHistoryFatherOther = entity.getFamilyHistoryFatherOther();
        if (familyHistoryFatherOther != null) {
            stmt.bindString(37, familyHistoryFatherOther);
        }
 
        String familyHistoryMatherCodes = entity.getFamilyHistoryMatherCodes();
        if (familyHistoryMatherCodes != null) {
            stmt.bindString(38, familyHistoryMatherCodes);
        }
 
        String familyHistoryMatherOther = entity.getFamilyHistoryMatherOther();
        if (familyHistoryMatherOther != null) {
            stmt.bindString(39, familyHistoryMatherOther);
        }
 
        String brotherAndSisterCodes = entity.getBrotherAndSisterCodes();
        if (brotherAndSisterCodes != null) {
            stmt.bindString(40, brotherAndSisterCodes);
        }
 
        String brotherAndSisterOther = entity.getBrotherAndSisterOther();
        if (brotherAndSisterOther != null) {
            stmt.bindString(41, brotherAndSisterOther);
        }
 
        String familyHistoryChildrenCodes = entity.getFamilyHistoryChildrenCodes();
        if (familyHistoryChildrenCodes != null) {
            stmt.bindString(42, familyHistoryChildrenCodes);
        }
 
        String familyHistoryChildrenOther = entity.getFamilyHistoryChildrenOther();
        if (familyHistoryChildrenOther != null) {
            stmt.bindString(43, familyHistoryChildrenOther);
        }
 
        String geneticHistoryCode = entity.getGeneticHistoryCode();
        if (geneticHistoryCode != null) {
            stmt.bindString(44, geneticHistoryCode);
        }
 
        String geneticHistoryOther = entity.getGeneticHistoryOther();
        if (geneticHistoryOther != null) {
            stmt.bindString(45, geneticHistoryOther);
        }
 
        String disabilityCodes = entity.getDisabilityCodes();
        if (disabilityCodes != null) {
            stmt.bindString(46, disabilityCodes);
        }
 
        String disabilityOther = entity.getDisabilityOther();
        if (disabilityOther != null) {
            stmt.bindString(47, disabilityOther);
        }
 
        String kitchenExhaustCode = entity.getKitchenExhaustCode();
        if (kitchenExhaustCode != null) {
            stmt.bindString(48, kitchenExhaustCode);
        }
 
        String fuelTypeCode = entity.getFuelTypeCode();
        if (fuelTypeCode != null) {
            stmt.bindString(49, fuelTypeCode);
        }
 
        String waterCode = entity.getWaterCode();
        if (waterCode != null) {
            stmt.bindString(50, waterCode);
        }
 
        String toiletCode = entity.getToiletCode();
        if (toiletCode != null) {
            stmt.bindString(51, toiletCode);
        }
 
        String livestockColumnCode = entity.getLivestockColumnCode();
        if (livestockColumnCode != null) {
            stmt.bindString(52, livestockColumnCode);
        }
 
        String pastHistoryList = entity.getPastHistoryList();
        if (pastHistoryList != null) {
            stmt.bindString(53, pastHistoryList);
        }
 
        String rhBloodGroupCode = entity.getRhBloodGroupCode();
        if (rhBloodGroupCode != null) {
            stmt.bindString(54, rhBloodGroupCode);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HealthRecord_down readEntity(Cursor cursor, int offset) {
        HealthRecord_down entity = new HealthRecord_down( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // personId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nowLiveCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nowLiveName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nowLiveAddr
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // householdRegisterCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // householdRegisterName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // householdRegisterAddr
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // registerOrgCode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // registerOrgName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // responsibleDoctorCode
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // responsibleDoctorName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // registerDoctorCode
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // registerDoctorName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // registerDate
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // healthFileNumber
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // name
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // genderCode
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // birthday
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // idCard
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // workUnit
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // phone
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // contacts
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // contactsPhone
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // residentType
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // ethnicityCode
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // ethnicityName
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // bloodGroupCode
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // eduBGCode
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // occupationCode
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // maritalStatusCode
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // paymentMethodCodes
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // paymentMethodOther
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // drugAllergyHistoryCodes
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // drugAllergyHistoryOther
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // exposureHistoryCodes
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // familyHistoryFatherCodes
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // familyHistoryFatherOther
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // familyHistoryMatherCodes
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // familyHistoryMatherOther
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // brotherAndSisterCodes
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // brotherAndSisterOther
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // familyHistoryChildrenCodes
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // familyHistoryChildrenOther
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // geneticHistoryCode
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // geneticHistoryOther
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // disabilityCodes
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // disabilityOther
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // kitchenExhaustCode
            cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48), // fuelTypeCode
            cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49), // waterCode
            cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50), // toiletCode
            cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51), // livestockColumnCode
            cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52), // pastHistoryList
            cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53) // rhBloodGroupCode
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HealthRecord_down entity, int offset) {
        entity.setPersonId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNowLiveCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNowLiveName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNowLiveAddr(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHouseholdRegisterCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHouseholdRegisterName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHouseholdRegisterAddr(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRegisterOrgCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRegisterOrgName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setResponsibleDoctorCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setResponsibleDoctorName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRegisterDoctorCode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRegisterDoctorName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRegisterDate(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setHealthFileNumber(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setGenderCode(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setBirthday(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setIdCard(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setWorkUnit(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setPhone(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setContacts(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setContactsPhone(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setResidentType(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setEthnicityCode(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setEthnicityName(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setBloodGroupCode(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setEduBGCode(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setOccupationCode(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setMaritalStatusCode(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setPaymentMethodCodes(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setPaymentMethodOther(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setDrugAllergyHistoryCodes(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setDrugAllergyHistoryOther(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setExposureHistoryCodes(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setFamilyHistoryFatherCodes(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setFamilyHistoryFatherOther(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setFamilyHistoryMatherCodes(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setFamilyHistoryMatherOther(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setBrotherAndSisterCodes(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setBrotherAndSisterOther(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setFamilyHistoryChildrenCodes(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setFamilyHistoryChildrenOther(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setGeneticHistoryCode(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setGeneticHistoryOther(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setDisabilityCodes(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setDisabilityOther(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setKitchenExhaustCode(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setFuelTypeCode(cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48));
        entity.setWaterCode(cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49));
        entity.setToiletCode(cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50));
        entity.setLivestockColumnCode(cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51));
        entity.setPastHistoryList(cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52));
        entity.setRhBloodGroupCode(cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(HealthRecord_down entity, long rowId) {
        return entity.getPersonId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(HealthRecord_down entity) {
        if(entity != null) {
            return entity.getPersonId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
