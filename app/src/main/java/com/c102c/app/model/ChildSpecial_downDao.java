package com.c102c.app.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.c102c.app.model.ChildSpecial_down;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHILD_SPECIAL_DOWN".
*/
public class ChildSpecial_downDao extends AbstractDao<ChildSpecial_down, String> {

    public static final String TABLENAME = "CHILD_SPECIAL_DOWN";

    /**
     * Properties of entity ChildSpecial_down.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PersonId = new Property(0, String.class, "personId", true, "PERSON_ID");
        public final static Property SpecialNo = new Property(1, String.class, "specialNo", false, "SPECIAL_NO");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property GenderCode = new Property(3, String.class, "genderCode", false, "GENDER_CODE");
        public final static Property Birthday = new Property(4, String.class, "birthday", false, "BIRTHDAY");
        public final static Property HouseholdRegister = new Property(5, String.class, "householdRegister", false, "HOUSEHOLD_REGISTER");
        public final static Property ChildHealthCardNo = new Property(6, String.class, "childHealthCardNo", false, "CHILD_HEALTH_CARD_NO");
        public final static Property BirthWeight = new Property(7, String.class, "birthWeight", false, "BIRTH_WEIGHT");
        public final static Property BirthHeight = new Property(8, String.class, "birthHeight", false, "BIRTH_HEIGHT");
        public final static Property Parity = new Property(9, String.class, "parity", false, "PARITY");
        public final static Property DeliveryTimes = new Property(10, String.class, "deliveryTimes", false, "DELIVERY_TIMES");
        public final static Property DeliveryGestationalWeeks = new Property(11, String.class, "deliveryGestationalWeeks", false, "DELIVERY_GESTATIONAL_WEEKS");
        public final static Property DeliveryModeCode = new Property(12, String.class, "deliveryModeCode", false, "DELIVERY_MODE_CODE");
        public final static Property Childbirth = new Property(13, String.class, "childbirth", false, "CHILDBIRTH");
        public final static Property BirthHospital = new Property(14, String.class, "birthHospital", false, "BIRTH_HOSPITAL");
        public final static Property FatherName = new Property(15, String.class, "fatherName", false, "FATHER_NAME");
        public final static Property MatherName = new Property(16, String.class, "matherName", false, "MATHER_NAME");
        public final static Property FatherContac = new Property(17, String.class, "fatherContac", false, "FATHER_CONTAC");
        public final static Property MatherContac = new Property(18, String.class, "matherContac", false, "MATHER_CONTAC");
        public final static Property UNHSCode = new Property(19, String.class, "UNHSCode", false, "UNHSCODE");
        public final static Property CYP17Code = new Property(20, String.class, "CYP17Code", false, "CYP17_CODE");
        public final static Property PKUCode = new Property(21, String.class, "PKUCode", false, "PKUCODE");
        public final static Property CHCode = new Property(22, String.class, "CHCode", false, "CHCODE");
        public final static Property HighRiskCode = new Property(23, String.class, "highRiskCode", false, "HIGH_RISK_CODE");
        public final static Property HighRiskFactors = new Property(24, String.class, "highRiskFactors", false, "HIGH_RISK_FACTORS");
        public final static Property Apgar1 = new Property(25, String.class, "apgar1", false, "APGAR1");
        public final static Property Apgar5 = new Property(26, String.class, "apgar5", false, "APGAR5");
        public final static Property Apgar10 = new Property(27, String.class, "apgar10", false, "APGAR10");
        public final static Property PastHistory = new Property(28, String.class, "pastHistory", false, "PAST_HISTORY");
        public final static Property AllergicHistory = new Property(29, String.class, "allergicHistory", false, "ALLERGIC_HISTORY");
        public final static Property ChildbirthHospital = new Property(30, String.class, "childbirthHospital", false, "CHILDBIRTH_HOSPITAL");
        public final static Property ChildbirthDoctor = new Property(31, String.class, "childbirthDoctor", false, "CHILDBIRTH_DOCTOR");
        public final static Property ChildbirthAssistant = new Property(32, String.class, "childbirthAssistant", false, "CHILDBIRTH_ASSISTANT");
        public final static Property RegisterDate = new Property(33, String.class, "registerDate", false, "REGISTER_DATE");
        public final static Property RegisterOrgCode = new Property(34, String.class, "registerOrgCode", false, "REGISTER_ORG_CODE");
        public final static Property RegisterOrgName = new Property(35, String.class, "registerOrgName", false, "REGISTER_ORG_NAME");
        public final static Property RegisterDoctorCode = new Property(36, String.class, "registerDoctorCode", false, "REGISTER_DOCTOR_CODE");
        public final static Property RegisterDoctorName = new Property(37, String.class, "registerDoctorName", false, "REGISTER_DOCTOR_NAME");
    };


    public ChildSpecial_downDao(DaoConfig config) {
        super(config);
    }
    
    public ChildSpecial_downDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHILD_SPECIAL_DOWN\" (" + //
                "\"PERSON_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: personId
                "\"SPECIAL_NO\" TEXT," + // 1: specialNo
                "\"NAME\" TEXT," + // 2: name
                "\"GENDER_CODE\" TEXT," + // 3: genderCode
                "\"BIRTHDAY\" TEXT," + // 4: birthday
                "\"HOUSEHOLD_REGISTER\" TEXT," + // 5: householdRegister
                "\"CHILD_HEALTH_CARD_NO\" TEXT," + // 6: childHealthCardNo
                "\"BIRTH_WEIGHT\" TEXT," + // 7: birthWeight
                "\"BIRTH_HEIGHT\" TEXT," + // 8: birthHeight
                "\"PARITY\" TEXT," + // 9: parity
                "\"DELIVERY_TIMES\" TEXT," + // 10: deliveryTimes
                "\"DELIVERY_GESTATIONAL_WEEKS\" TEXT," + // 11: deliveryGestationalWeeks
                "\"DELIVERY_MODE_CODE\" TEXT," + // 12: deliveryModeCode
                "\"CHILDBIRTH\" TEXT," + // 13: childbirth
                "\"BIRTH_HOSPITAL\" TEXT," + // 14: birthHospital
                "\"FATHER_NAME\" TEXT," + // 15: fatherName
                "\"MATHER_NAME\" TEXT," + // 16: matherName
                "\"FATHER_CONTAC\" TEXT," + // 17: fatherContac
                "\"MATHER_CONTAC\" TEXT," + // 18: matherContac
                "\"UNHSCODE\" TEXT," + // 19: UNHSCode
                "\"CYP17_CODE\" TEXT," + // 20: CYP17Code
                "\"PKUCODE\" TEXT," + // 21: PKUCode
                "\"CHCODE\" TEXT," + // 22: CHCode
                "\"HIGH_RISK_CODE\" TEXT," + // 23: highRiskCode
                "\"HIGH_RISK_FACTORS\" TEXT," + // 24: highRiskFactors
                "\"APGAR1\" TEXT," + // 25: apgar1
                "\"APGAR5\" TEXT," + // 26: apgar5
                "\"APGAR10\" TEXT," + // 27: apgar10
                "\"PAST_HISTORY\" TEXT," + // 28: pastHistory
                "\"ALLERGIC_HISTORY\" TEXT," + // 29: allergicHistory
                "\"CHILDBIRTH_HOSPITAL\" TEXT," + // 30: childbirthHospital
                "\"CHILDBIRTH_DOCTOR\" TEXT," + // 31: childbirthDoctor
                "\"CHILDBIRTH_ASSISTANT\" TEXT," + // 32: childbirthAssistant
                "\"REGISTER_DATE\" TEXT," + // 33: registerDate
                "\"REGISTER_ORG_CODE\" TEXT," + // 34: registerOrgCode
                "\"REGISTER_ORG_NAME\" TEXT," + // 35: registerOrgName
                "\"REGISTER_DOCTOR_CODE\" TEXT," + // 36: registerDoctorCode
                "\"REGISTER_DOCTOR_NAME\" TEXT);"); // 37: registerDoctorName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHILD_SPECIAL_DOWN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChildSpecial_down entity) {
        stmt.clearBindings();
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(1, personId);
        }
 
        String specialNo = entity.getSpecialNo();
        if (specialNo != null) {
            stmt.bindString(2, specialNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String genderCode = entity.getGenderCode();
        if (genderCode != null) {
            stmt.bindString(4, genderCode);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(5, birthday);
        }
 
        String householdRegister = entity.getHouseholdRegister();
        if (householdRegister != null) {
            stmt.bindString(6, householdRegister);
        }
 
        String childHealthCardNo = entity.getChildHealthCardNo();
        if (childHealthCardNo != null) {
            stmt.bindString(7, childHealthCardNo);
        }
 
        String birthWeight = entity.getBirthWeight();
        if (birthWeight != null) {
            stmt.bindString(8, birthWeight);
        }
 
        String birthHeight = entity.getBirthHeight();
        if (birthHeight != null) {
            stmt.bindString(9, birthHeight);
        }
 
        String parity = entity.getParity();
        if (parity != null) {
            stmt.bindString(10, parity);
        }
 
        String deliveryTimes = entity.getDeliveryTimes();
        if (deliveryTimes != null) {
            stmt.bindString(11, deliveryTimes);
        }
 
        String deliveryGestationalWeeks = entity.getDeliveryGestationalWeeks();
        if (deliveryGestationalWeeks != null) {
            stmt.bindString(12, deliveryGestationalWeeks);
        }
 
        String deliveryModeCode = entity.getDeliveryModeCode();
        if (deliveryModeCode != null) {
            stmt.bindString(13, deliveryModeCode);
        }
 
        String childbirth = entity.getChildbirth();
        if (childbirth != null) {
            stmt.bindString(14, childbirth);
        }
 
        String birthHospital = entity.getBirthHospital();
        if (birthHospital != null) {
            stmt.bindString(15, birthHospital);
        }
 
        String fatherName = entity.getFatherName();
        if (fatherName != null) {
            stmt.bindString(16, fatherName);
        }
 
        String matherName = entity.getMatherName();
        if (matherName != null) {
            stmt.bindString(17, matherName);
        }
 
        String fatherContac = entity.getFatherContac();
        if (fatherContac != null) {
            stmt.bindString(18, fatherContac);
        }
 
        String matherContac = entity.getMatherContac();
        if (matherContac != null) {
            stmt.bindString(19, matherContac);
        }
 
        String UNHSCode = entity.getUNHSCode();
        if (UNHSCode != null) {
            stmt.bindString(20, UNHSCode);
        }
 
        String CYP17Code = entity.getCYP17Code();
        if (CYP17Code != null) {
            stmt.bindString(21, CYP17Code);
        }
 
        String PKUCode = entity.getPKUCode();
        if (PKUCode != null) {
            stmt.bindString(22, PKUCode);
        }
 
        String CHCode = entity.getCHCode();
        if (CHCode != null) {
            stmt.bindString(23, CHCode);
        }
 
        String highRiskCode = entity.getHighRiskCode();
        if (highRiskCode != null) {
            stmt.bindString(24, highRiskCode);
        }
 
        String highRiskFactors = entity.getHighRiskFactors();
        if (highRiskFactors != null) {
            stmt.bindString(25, highRiskFactors);
        }
 
        String apgar1 = entity.getApgar1();
        if (apgar1 != null) {
            stmt.bindString(26, apgar1);
        }
 
        String apgar5 = entity.getApgar5();
        if (apgar5 != null) {
            stmt.bindString(27, apgar5);
        }
 
        String apgar10 = entity.getApgar10();
        if (apgar10 != null) {
            stmt.bindString(28, apgar10);
        }
 
        String pastHistory = entity.getPastHistory();
        if (pastHistory != null) {
            stmt.bindString(29, pastHistory);
        }
 
        String allergicHistory = entity.getAllergicHistory();
        if (allergicHistory != null) {
            stmt.bindString(30, allergicHistory);
        }
 
        String childbirthHospital = entity.getChildbirthHospital();
        if (childbirthHospital != null) {
            stmt.bindString(31, childbirthHospital);
        }
 
        String childbirthDoctor = entity.getChildbirthDoctor();
        if (childbirthDoctor != null) {
            stmt.bindString(32, childbirthDoctor);
        }
 
        String childbirthAssistant = entity.getChildbirthAssistant();
        if (childbirthAssistant != null) {
            stmt.bindString(33, childbirthAssistant);
        }
 
        String registerDate = entity.getRegisterDate();
        if (registerDate != null) {
            stmt.bindString(34, registerDate);
        }
 
        String registerOrgCode = entity.getRegisterOrgCode();
        if (registerOrgCode != null) {
            stmt.bindString(35, registerOrgCode);
        }
 
        String registerOrgName = entity.getRegisterOrgName();
        if (registerOrgName != null) {
            stmt.bindString(36, registerOrgName);
        }
 
        String registerDoctorCode = entity.getRegisterDoctorCode();
        if (registerDoctorCode != null) {
            stmt.bindString(37, registerDoctorCode);
        }
 
        String registerDoctorName = entity.getRegisterDoctorName();
        if (registerDoctorName != null) {
            stmt.bindString(38, registerDoctorName);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChildSpecial_down readEntity(Cursor cursor, int offset) {
        ChildSpecial_down entity = new ChildSpecial_down( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // personId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // specialNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // genderCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // birthday
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // householdRegister
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // childHealthCardNo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // birthWeight
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // birthHeight
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // parity
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // deliveryTimes
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // deliveryGestationalWeeks
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // deliveryModeCode
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // childbirth
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // birthHospital
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // fatherName
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // matherName
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // fatherContac
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // matherContac
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // UNHSCode
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // CYP17Code
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // PKUCode
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // CHCode
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // highRiskCode
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // highRiskFactors
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // apgar1
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // apgar5
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // apgar10
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // pastHistory
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // allergicHistory
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // childbirthHospital
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // childbirthDoctor
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // childbirthAssistant
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // registerDate
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // registerOrgCode
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // registerOrgName
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // registerDoctorCode
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37) // registerDoctorName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChildSpecial_down entity, int offset) {
        entity.setPersonId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSpecialNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGenderCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBirthday(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHouseholdRegister(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setChildHealthCardNo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBirthWeight(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBirthHeight(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setParity(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDeliveryTimes(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDeliveryGestationalWeeks(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDeliveryModeCode(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setChildbirth(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBirthHospital(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFatherName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMatherName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setFatherContac(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setMatherContac(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setUNHSCode(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setCYP17Code(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPKUCode(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setCHCode(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setHighRiskCode(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setHighRiskFactors(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setApgar1(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setApgar5(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setApgar10(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setPastHistory(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setAllergicHistory(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setChildbirthHospital(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setChildbirthDoctor(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setChildbirthAssistant(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setRegisterDate(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setRegisterOrgCode(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setRegisterOrgName(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setRegisterDoctorCode(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setRegisterDoctorName(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ChildSpecial_down entity, long rowId) {
        return entity.getPersonId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ChildSpecial_down entity) {
        if(entity != null) {
            return entity.getPersonId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
