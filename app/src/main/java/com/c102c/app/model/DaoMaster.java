package com.c102c.app.model;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.c102c.app.model.DiabetesFlup_uploadDao;
import com.c102c.app.model.HypertensionFlup_uploadDao;
import com.c102c.app.model.HypertensionScreen_uploadDao;
import com.c102c.app.model.NeonatalVisit_uploadDao;
import com.c102c.app.model.Postpartum42Visit_uploadDao;
import com.c102c.app.model.PostpartumVisit_uploadDao;
import com.c102c.app.model.PregnantFirstCheck_uploadDao;
import com.c102c.app.model.PregnantRecheck_uploadDao;
import com.c102c.app.model.Area_downDao;
import com.c102c.app.model.Org_downDao;
import com.c102c.app.model.Dictionary_downDao;
import com.c102c.app.model.User_downDao;
import com.c102c.app.model.HealthRecord_downDao;
import com.c102c.app.model.PastHistory_downDao;
import com.c102c.app.model.HealthRecord_StatusDao;
import com.c102c.app.model.HealthExaminationDao;
import com.c102c.app.model.PregnantSpecial_downDao;
import com.c102c.app.model.ChildSpecial_downDao;
import com.c102c.app.model.HypertensionSpecial_downDao;
import com.c102c.app.model.HypertensionFlup_downDao;
import com.c102c.app.model.DiabetesSpecial_downDao;
import com.c102c.app.model.DiabetesFlup_downDao;
import com.c102c.app.model.Person_downDao;
import com.c102c.app.model.RequestMessageDao;
import com.c102c.app.model.LocalMeasurementXueYaDao;
import com.c102c.app.model.LocalMeasurementEWenDao;
import com.c102c.app.model.LocalMeasurementXueTangDao;
import com.c102c.app.model.LocalMeasurementXueYangDao;
import com.c102c.app.model.LocalMeasurementXinDianDao;
import com.c102c.app.model.LocalMeasurementNiaoYeDao;
import com.c102c.app.model.LocalMeasurementBaiXiBaoDao;
import com.c102c.app.model.LocalJieZhenDao;
import com.c102c.app.model.LocalZhuanZhenDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 100): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 100;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        DiabetesFlup_uploadDao.createTable(db, ifNotExists);
        HypertensionFlup_uploadDao.createTable(db, ifNotExists);
        HypertensionScreen_uploadDao.createTable(db, ifNotExists);
        NeonatalVisit_uploadDao.createTable(db, ifNotExists);
        Postpartum42Visit_uploadDao.createTable(db, ifNotExists);
        PostpartumVisit_uploadDao.createTable(db, ifNotExists);
        PregnantFirstCheck_uploadDao.createTable(db, ifNotExists);
        PregnantRecheck_uploadDao.createTable(db, ifNotExists);
        Area_downDao.createTable(db, ifNotExists);
        Org_downDao.createTable(db, ifNotExists);
        Dictionary_downDao.createTable(db, ifNotExists);
        User_downDao.createTable(db, ifNotExists);
        HealthRecord_downDao.createTable(db, ifNotExists);
        PastHistory_downDao.createTable(db, ifNotExists);
        HealthRecord_StatusDao.createTable(db, ifNotExists);
        HealthExaminationDao.createTable(db, ifNotExists);
        PregnantSpecial_downDao.createTable(db, ifNotExists);
        ChildSpecial_downDao.createTable(db, ifNotExists);
        HypertensionSpecial_downDao.createTable(db, ifNotExists);
        HypertensionFlup_downDao.createTable(db, ifNotExists);
        DiabetesSpecial_downDao.createTable(db, ifNotExists);
        DiabetesFlup_downDao.createTable(db, ifNotExists);
        Person_downDao.createTable(db, ifNotExists);
        RequestMessageDao.createTable(db, ifNotExists);
        LocalMeasurementXueYaDao.createTable(db, ifNotExists);
        LocalMeasurementEWenDao.createTable(db, ifNotExists);
        LocalMeasurementXueTangDao.createTable(db, ifNotExists);
        LocalMeasurementXueYangDao.createTable(db, ifNotExists);
        LocalMeasurementXinDianDao.createTable(db, ifNotExists);
        LocalMeasurementNiaoYeDao.createTable(db, ifNotExists);
        LocalMeasurementBaiXiBaoDao.createTable(db, ifNotExists);
        LocalJieZhenDao.createTable(db, ifNotExists);
        LocalZhuanZhenDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        DiabetesFlup_uploadDao.dropTable(db, ifExists);
        HypertensionFlup_uploadDao.dropTable(db, ifExists);
        HypertensionScreen_uploadDao.dropTable(db, ifExists);
        NeonatalVisit_uploadDao.dropTable(db, ifExists);
        Postpartum42Visit_uploadDao.dropTable(db, ifExists);
        PostpartumVisit_uploadDao.dropTable(db, ifExists);
        PregnantFirstCheck_uploadDao.dropTable(db, ifExists);
        PregnantRecheck_uploadDao.dropTable(db, ifExists);
        Area_downDao.dropTable(db, ifExists);
        Org_downDao.dropTable(db, ifExists);
        Dictionary_downDao.dropTable(db, ifExists);
        User_downDao.dropTable(db, ifExists);
        HealthRecord_downDao.dropTable(db, ifExists);
        PastHistory_downDao.dropTable(db, ifExists);
        HealthRecord_StatusDao.dropTable(db, ifExists);
        HealthExaminationDao.dropTable(db, ifExists);
        PregnantSpecial_downDao.dropTable(db, ifExists);
        ChildSpecial_downDao.dropTable(db, ifExists);
        HypertensionSpecial_downDao.dropTable(db, ifExists);
        HypertensionFlup_downDao.dropTable(db, ifExists);
        DiabetesSpecial_downDao.dropTable(db, ifExists);
        DiabetesFlup_downDao.dropTable(db, ifExists);
        Person_downDao.dropTable(db, ifExists);
        RequestMessageDao.dropTable(db, ifExists);
        LocalMeasurementXueYaDao.dropTable(db, ifExists);
        LocalMeasurementEWenDao.dropTable(db, ifExists);
        LocalMeasurementXueTangDao.dropTable(db, ifExists);
        LocalMeasurementXueYangDao.dropTable(db, ifExists);
        LocalMeasurementXinDianDao.dropTable(db, ifExists);
        LocalMeasurementNiaoYeDao.dropTable(db, ifExists);
        LocalMeasurementBaiXiBaoDao.dropTable(db, ifExists);
        LocalJieZhenDao.dropTable(db, ifExists);
        LocalZhuanZhenDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(DiabetesFlup_uploadDao.class);
        registerDaoClass(HypertensionFlup_uploadDao.class);
        registerDaoClass(HypertensionScreen_uploadDao.class);
        registerDaoClass(NeonatalVisit_uploadDao.class);
        registerDaoClass(Postpartum42Visit_uploadDao.class);
        registerDaoClass(PostpartumVisit_uploadDao.class);
        registerDaoClass(PregnantFirstCheck_uploadDao.class);
        registerDaoClass(PregnantRecheck_uploadDao.class);
        registerDaoClass(Area_downDao.class);
        registerDaoClass(Org_downDao.class);
        registerDaoClass(Dictionary_downDao.class);
        registerDaoClass(User_downDao.class);
        registerDaoClass(HealthRecord_downDao.class);
        registerDaoClass(PastHistory_downDao.class);
        registerDaoClass(HealthRecord_StatusDao.class);
        registerDaoClass(HealthExaminationDao.class);
        registerDaoClass(PregnantSpecial_downDao.class);
        registerDaoClass(ChildSpecial_downDao.class);
        registerDaoClass(HypertensionSpecial_downDao.class);
        registerDaoClass(HypertensionFlup_downDao.class);
        registerDaoClass(DiabetesSpecial_downDao.class);
        registerDaoClass(DiabetesFlup_downDao.class);
        registerDaoClass(Person_downDao.class);
        registerDaoClass(RequestMessageDao.class);
        registerDaoClass(LocalMeasurementXueYaDao.class);
        registerDaoClass(LocalMeasurementEWenDao.class);
        registerDaoClass(LocalMeasurementXueTangDao.class);
        registerDaoClass(LocalMeasurementXueYangDao.class);
        registerDaoClass(LocalMeasurementXinDianDao.class);
        registerDaoClass(LocalMeasurementNiaoYeDao.class);
        registerDaoClass(LocalMeasurementBaiXiBaoDao.class);
        registerDaoClass(LocalJieZhenDao.class);
        registerDaoClass(LocalZhuanZhenDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
