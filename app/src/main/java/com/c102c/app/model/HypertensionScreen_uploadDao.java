package com.c102c.app.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.c102c.app.model.HypertensionScreen_upload;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HYPERTENSION_SCREEN_UPLOAD".
*/
public class HypertensionScreen_uploadDao extends AbstractDao<HypertensionScreen_upload, Long> {

    public static final String TABLENAME = "HYPERTENSION_SCREEN_UPLOAD";

    /**
     * Properties of entity HypertensionScreen_upload.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PersonId = new Property(1, String.class, "personId", false, "PERSON_ID");
        public final static Property MachineCode = new Property(2, String.class, "machineCode", false, "MACHINE_CODE");
        public final static Property MachineNo = new Property(3, String.class, "machineNo", false, "MACHINE_NO");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property ScreenDate = new Property(5, String.class, "screenDate", false, "SCREEN_DATE");
        public final static Property ScreenType = new Property(6, String.class, "screenType", false, "SCREEN_TYPE");
        public final static Property SBP = new Property(7, String.class, "SBP", false, "SBP");
        public final static Property DBP = new Property(8, String.class, "DBP", false, "DBP");
        public final static Property BloodPressureLevel = new Property(9, String.class, "bloodPressureLevel", false, "BLOOD_PRESSURE_LEVEL");
        public final static Property HighValueCode = new Property(10, String.class, "highValueCode", false, "HIGH_VALUE_CODE");
        public final static Property HighRiskCode = new Property(11, String.class, "highRiskCode", false, "HIGH_RISK_CODE");
        public final static Property ScreenDoctorCode = new Property(12, String.class, "screenDoctorCode", false, "SCREEN_DOCTOR_CODE");
        public final static Property ScreenDoctorName = new Property(13, String.class, "screenDoctorName", false, "SCREEN_DOCTOR_NAME");
        public final static Property ScreenOrgCode = new Property(14, String.class, "screenOrgCode", false, "SCREEN_ORG_CODE");
        public final static Property ScreenOrgName = new Property(15, String.class, "screenOrgName", false, "SCREEN_ORG_NAME");
        public final static Property NextScreenDate = new Property(16, String.class, "nextScreenDate", false, "NEXT_SCREEN_DATE");
        public final static Property ScreenGuideCode = new Property(17, String.class, "screenGuideCode", false, "SCREEN_GUIDE_CODE");
    };


    public HypertensionScreen_uploadDao(DaoConfig config) {
        super(config);
    }
    
    public HypertensionScreen_uploadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HYPERTENSION_SCREEN_UPLOAD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PERSON_ID\" TEXT," + // 1: personId
                "\"MACHINE_CODE\" TEXT," + // 2: machineCode
                "\"MACHINE_NO\" TEXT," + // 3: machineNo
                "\"NAME\" TEXT," + // 4: name
                "\"SCREEN_DATE\" TEXT," + // 5: screenDate
                "\"SCREEN_TYPE\" TEXT," + // 6: screenType
                "\"SBP\" TEXT," + // 7: SBP
                "\"DBP\" TEXT," + // 8: DBP
                "\"BLOOD_PRESSURE_LEVEL\" TEXT," + // 9: bloodPressureLevel
                "\"HIGH_VALUE_CODE\" TEXT," + // 10: highValueCode
                "\"HIGH_RISK_CODE\" TEXT," + // 11: highRiskCode
                "\"SCREEN_DOCTOR_CODE\" TEXT," + // 12: screenDoctorCode
                "\"SCREEN_DOCTOR_NAME\" TEXT," + // 13: screenDoctorName
                "\"SCREEN_ORG_CODE\" TEXT," + // 14: screenOrgCode
                "\"SCREEN_ORG_NAME\" TEXT," + // 15: screenOrgName
                "\"NEXT_SCREEN_DATE\" TEXT," + // 16: nextScreenDate
                "\"SCREEN_GUIDE_CODE\" TEXT);"); // 17: screenGuideCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HYPERTENSION_SCREEN_UPLOAD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HypertensionScreen_upload entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(2, personId);
        }
 
        String machineCode = entity.getMachineCode();
        if (machineCode != null) {
            stmt.bindString(3, machineCode);
        }
 
        String machineNo = entity.getMachineNo();
        if (machineNo != null) {
            stmt.bindString(4, machineNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String screenDate = entity.getScreenDate();
        if (screenDate != null) {
            stmt.bindString(6, screenDate);
        }
 
        String screenType = entity.getScreenType();
        if (screenType != null) {
            stmt.bindString(7, screenType);
        }
 
        String SBP = entity.getSBP();
        if (SBP != null) {
            stmt.bindString(8, SBP);
        }
 
        String DBP = entity.getDBP();
        if (DBP != null) {
            stmt.bindString(9, DBP);
        }
 
        String bloodPressureLevel = entity.getBloodPressureLevel();
        if (bloodPressureLevel != null) {
            stmt.bindString(10, bloodPressureLevel);
        }
 
        String highValueCode = entity.getHighValueCode();
        if (highValueCode != null) {
            stmt.bindString(11, highValueCode);
        }
 
        String highRiskCode = entity.getHighRiskCode();
        if (highRiskCode != null) {
            stmt.bindString(12, highRiskCode);
        }
 
        String screenDoctorCode = entity.getScreenDoctorCode();
        if (screenDoctorCode != null) {
            stmt.bindString(13, screenDoctorCode);
        }
 
        String screenDoctorName = entity.getScreenDoctorName();
        if (screenDoctorName != null) {
            stmt.bindString(14, screenDoctorName);
        }
 
        String screenOrgCode = entity.getScreenOrgCode();
        if (screenOrgCode != null) {
            stmt.bindString(15, screenOrgCode);
        }
 
        String screenOrgName = entity.getScreenOrgName();
        if (screenOrgName != null) {
            stmt.bindString(16, screenOrgName);
        }
 
        String nextScreenDate = entity.getNextScreenDate();
        if (nextScreenDate != null) {
            stmt.bindString(17, nextScreenDate);
        }
 
        String screenGuideCode = entity.getScreenGuideCode();
        if (screenGuideCode != null) {
            stmt.bindString(18, screenGuideCode);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HypertensionScreen_upload readEntity(Cursor cursor, int offset) {
        HypertensionScreen_upload entity = new HypertensionScreen_upload( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // machineCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // machineNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // screenDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // screenType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // SBP
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // DBP
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // bloodPressureLevel
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // highValueCode
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // highRiskCode
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // screenDoctorCode
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // screenDoctorName
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // screenOrgCode
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // screenOrgName
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // nextScreenDate
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // screenGuideCode
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HypertensionScreen_upload entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPersonId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMachineCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMachineNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setScreenDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setScreenType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSBP(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDBP(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBloodPressureLevel(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setHighValueCode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setHighRiskCode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setScreenDoctorCode(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setScreenDoctorName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setScreenOrgCode(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setScreenOrgName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setNextScreenDate(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setScreenGuideCode(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HypertensionScreen_upload entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HypertensionScreen_upload entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
