package com.c102c.app.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.c102c.app.model.HealthRecord_Status;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HEALTH_RECORD__STATUS".
*/
public class HealthRecord_StatusDao extends AbstractDao<HealthRecord_Status, Long> {

    public static final String TABLENAME = "HEALTH_RECORD__STATUS";

    /**
     * Properties of entity HealthRecord_Status.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UpdateType = new Property(1, String.class, "updateType", false, "UPDATE_TYPE");
        public final static Property PersonId = new Property(2, String.class, "personId", false, "PERSON_ID");
        public final static Property MachineNo = new Property(3, String.class, "machineNo", false, "MACHINE_NO");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property RecordResultCode = new Property(5, String.class, "recordResultCode", false, "RECORD_RESULT_CODE");
        public final static Property RecordResultDesc = new Property(6, String.class, "recordResultDesc", false, "RECORD_RESULT_DESC");
    };


    public HealthRecord_StatusDao(DaoConfig config) {
        super(config);
    }
    
    public HealthRecord_StatusDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HEALTH_RECORD__STATUS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"UPDATE_TYPE\" TEXT," + // 1: updateType
                "\"PERSON_ID\" TEXT UNIQUE ," + // 2: personId
                "\"MACHINE_NO\" TEXT," + // 3: machineNo
                "\"NAME\" TEXT," + // 4: name
                "\"RECORD_RESULT_CODE\" TEXT," + // 5: recordResultCode
                "\"RECORD_RESULT_DESC\" TEXT);"); // 6: recordResultDesc
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HEALTH_RECORD__STATUS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HealthRecord_Status entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String updateType = entity.getUpdateType();
        if (updateType != null) {
            stmt.bindString(2, updateType);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(3, personId);
        }
 
        String machineNo = entity.getMachineNo();
        if (machineNo != null) {
            stmt.bindString(4, machineNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String recordResultCode = entity.getRecordResultCode();
        if (recordResultCode != null) {
            stmt.bindString(6, recordResultCode);
        }
 
        String recordResultDesc = entity.getRecordResultDesc();
        if (recordResultDesc != null) {
            stmt.bindString(7, recordResultDesc);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HealthRecord_Status readEntity(Cursor cursor, int offset) {
        HealthRecord_Status entity = new HealthRecord_Status( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // updateType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // personId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // machineNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // recordResultCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // recordResultDesc
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HealthRecord_Status entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUpdateType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPersonId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMachineNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRecordResultCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRecordResultDesc(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HealthRecord_Status entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HealthRecord_Status entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
