package com.c102c.app.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.c102c.app.model.PregnantSpecial_down;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PREGNANT_SPECIAL_DOWN".
*/
public class PregnantSpecial_downDao extends AbstractDao<PregnantSpecial_down, String> {

    public static final String TABLENAME = "PREGNANT_SPECIAL_DOWN";

    /**
     * Properties of entity PregnantSpecial_down.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PersonId = new Property(0, String.class, "personId", true, "PERSON_ID");
        public final static Property SpecialNo = new Property(1, String.class, "specialNo", false, "SPECIAL_NO");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Age = new Property(3, String.class, "age", false, "AGE");
        public final static Property LMP = new Property(4, String.class, "LMP", false, "LMP");
        public final static Property PregnantManualNo = new Property(5, String.class, "pregnantManualNo", false, "PREGNANT_MANUAL_NO");
        public final static Property HusbandName = new Property(6, String.class, "husbandName", false, "HUSBAND_NAME");
        public final static Property HusbandAge = new Property(7, String.class, "husbandAge", false, "HUSBAND_AGE");
        public final static Property HusbandPhone = new Property(8, String.class, "husbandPhone", false, "HUSBAND_PHONE");
        public final static Property GravidityTimes = new Property(9, String.class, "gravidityTimes", false, "GRAVIDITY_TIMES");
        public final static Property VaginalDeliveryTimes = new Property(10, String.class, "vaginalDeliveryTimes", false, "VAGINAL_DELIVERY_TIMES");
        public final static Property CaesareanSectionTimes = new Property(11, String.class, "caesareanSectionTimes", false, "CAESAREAN_SECTION_TIMES");
        public final static Property HighRiskCode = new Property(12, String.class, "highRiskCode", false, "HIGH_RISK_CODE");
        public final static Property HighRiskFactors = new Property(13, String.class, "highRiskFactors", false, "HIGH_RISK_FACTORS");
        public final static Property HighRiskScore = new Property(14, String.class, "highRiskScore", false, "HIGH_RISK_SCORE");
        public final static Property RegisterDate = new Property(15, String.class, "registerDate", false, "REGISTER_DATE");
        public final static Property RegisterOrgCode = new Property(16, String.class, "registerOrgCode", false, "REGISTER_ORG_CODE");
        public final static Property RegisterOrgName = new Property(17, String.class, "registerOrgName", false, "REGISTER_ORG_NAME");
        public final static Property RegisterDoctorCode = new Property(18, String.class, "registerDoctorCode", false, "REGISTER_DOCTOR_CODE");
        public final static Property RegisterDoctorName = new Property(19, String.class, "registerDoctorName", false, "REGISTER_DOCTOR_NAME");
        public final static Property CheckStatus = new Property(20, String.class, "checkStatus", false, "CHECK_STATUS");
        public final static Property VisitStatus = new Property(21, String.class, "visitStatus", false, "VISIT_STATUS");
        public final static Property Visit42Status = new Property(22, String.class, "visit42Status", false, "VISIT42_STATUS");
    };


    public PregnantSpecial_downDao(DaoConfig config) {
        super(config);
    }
    
    public PregnantSpecial_downDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PREGNANT_SPECIAL_DOWN\" (" + //
                "\"PERSON_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: personId
                "\"SPECIAL_NO\" TEXT," + // 1: specialNo
                "\"NAME\" TEXT," + // 2: name
                "\"AGE\" TEXT," + // 3: age
                "\"LMP\" TEXT," + // 4: LMP
                "\"PREGNANT_MANUAL_NO\" TEXT," + // 5: pregnantManualNo
                "\"HUSBAND_NAME\" TEXT," + // 6: husbandName
                "\"HUSBAND_AGE\" TEXT," + // 7: husbandAge
                "\"HUSBAND_PHONE\" TEXT," + // 8: husbandPhone
                "\"GRAVIDITY_TIMES\" TEXT," + // 9: gravidityTimes
                "\"VAGINAL_DELIVERY_TIMES\" TEXT," + // 10: vaginalDeliveryTimes
                "\"CAESAREAN_SECTION_TIMES\" TEXT," + // 11: caesareanSectionTimes
                "\"HIGH_RISK_CODE\" TEXT," + // 12: highRiskCode
                "\"HIGH_RISK_FACTORS\" TEXT," + // 13: highRiskFactors
                "\"HIGH_RISK_SCORE\" TEXT," + // 14: highRiskScore
                "\"REGISTER_DATE\" TEXT," + // 15: registerDate
                "\"REGISTER_ORG_CODE\" TEXT," + // 16: registerOrgCode
                "\"REGISTER_ORG_NAME\" TEXT," + // 17: registerOrgName
                "\"REGISTER_DOCTOR_CODE\" TEXT," + // 18: registerDoctorCode
                "\"REGISTER_DOCTOR_NAME\" TEXT," + // 19: registerDoctorName
                "\"CHECK_STATUS\" TEXT," + // 20: checkStatus
                "\"VISIT_STATUS\" TEXT," + // 21: visitStatus
                "\"VISIT42_STATUS\" TEXT);"); // 22: visit42Status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PREGNANT_SPECIAL_DOWN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PregnantSpecial_down entity) {
        stmt.clearBindings();
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(1, personId);
        }
 
        String specialNo = entity.getSpecialNo();
        if (specialNo != null) {
            stmt.bindString(2, specialNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(4, age);
        }
 
        String LMP = entity.getLMP();
        if (LMP != null) {
            stmt.bindString(5, LMP);
        }
 
        String pregnantManualNo = entity.getPregnantManualNo();
        if (pregnantManualNo != null) {
            stmt.bindString(6, pregnantManualNo);
        }
 
        String husbandName = entity.getHusbandName();
        if (husbandName != null) {
            stmt.bindString(7, husbandName);
        }
 
        String husbandAge = entity.getHusbandAge();
        if (husbandAge != null) {
            stmt.bindString(8, husbandAge);
        }
 
        String husbandPhone = entity.getHusbandPhone();
        if (husbandPhone != null) {
            stmt.bindString(9, husbandPhone);
        }
 
        String gravidityTimes = entity.getGravidityTimes();
        if (gravidityTimes != null) {
            stmt.bindString(10, gravidityTimes);
        }
 
        String vaginalDeliveryTimes = entity.getVaginalDeliveryTimes();
        if (vaginalDeliveryTimes != null) {
            stmt.bindString(11, vaginalDeliveryTimes);
        }
 
        String caesareanSectionTimes = entity.getCaesareanSectionTimes();
        if (caesareanSectionTimes != null) {
            stmt.bindString(12, caesareanSectionTimes);
        }
 
        String highRiskCode = entity.getHighRiskCode();
        if (highRiskCode != null) {
            stmt.bindString(13, highRiskCode);
        }
 
        String highRiskFactors = entity.getHighRiskFactors();
        if (highRiskFactors != null) {
            stmt.bindString(14, highRiskFactors);
        }
 
        String highRiskScore = entity.getHighRiskScore();
        if (highRiskScore != null) {
            stmt.bindString(15, highRiskScore);
        }
 
        String registerDate = entity.getRegisterDate();
        if (registerDate != null) {
            stmt.bindString(16, registerDate);
        }
 
        String registerOrgCode = entity.getRegisterOrgCode();
        if (registerOrgCode != null) {
            stmt.bindString(17, registerOrgCode);
        }
 
        String registerOrgName = entity.getRegisterOrgName();
        if (registerOrgName != null) {
            stmt.bindString(18, registerOrgName);
        }
 
        String registerDoctorCode = entity.getRegisterDoctorCode();
        if (registerDoctorCode != null) {
            stmt.bindString(19, registerDoctorCode);
        }
 
        String registerDoctorName = entity.getRegisterDoctorName();
        if (registerDoctorName != null) {
            stmt.bindString(20, registerDoctorName);
        }
 
        String checkStatus = entity.getCheckStatus();
        if (checkStatus != null) {
            stmt.bindString(21, checkStatus);
        }
 
        String visitStatus = entity.getVisitStatus();
        if (visitStatus != null) {
            stmt.bindString(22, visitStatus);
        }
 
        String visit42Status = entity.getVisit42Status();
        if (visit42Status != null) {
            stmt.bindString(23, visit42Status);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PregnantSpecial_down readEntity(Cursor cursor, int offset) {
        PregnantSpecial_down entity = new PregnantSpecial_down( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // personId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // specialNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // age
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // LMP
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pregnantManualNo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // husbandName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // husbandAge
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // husbandPhone
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // gravidityTimes
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // vaginalDeliveryTimes
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // caesareanSectionTimes
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // highRiskCode
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // highRiskFactors
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // highRiskScore
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // registerDate
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // registerOrgCode
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // registerOrgName
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // registerDoctorCode
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // registerDoctorName
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // checkStatus
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // visitStatus
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // visit42Status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PregnantSpecial_down entity, int offset) {
        entity.setPersonId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSpecialNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAge(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLMP(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPregnantManualNo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHusbandName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHusbandAge(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHusbandPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGravidityTimes(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setVaginalDeliveryTimes(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCaesareanSectionTimes(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setHighRiskCode(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setHighRiskFactors(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setHighRiskScore(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRegisterDate(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setRegisterOrgCode(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setRegisterOrgName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setRegisterDoctorCode(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setRegisterDoctorName(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setCheckStatus(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setVisitStatus(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setVisit42Status(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(PregnantSpecial_down entity, long rowId) {
        return entity.getPersonId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(PregnantSpecial_down entity) {
        if(entity != null) {
            return entity.getPersonId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
