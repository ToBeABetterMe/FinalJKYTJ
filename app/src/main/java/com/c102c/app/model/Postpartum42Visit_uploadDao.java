package com.c102c.app.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.c102c.app.model.Postpartum42Visit_upload;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POSTPARTUM42_VISIT_UPLOAD".
*/
public class Postpartum42Visit_uploadDao extends AbstractDao<Postpartum42Visit_upload, Long> {

    public static final String TABLENAME = "POSTPARTUM42_VISIT_UPLOAD";

    /**
     * Properties of entity Postpartum42Visit_upload.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PersonId = new Property(1, String.class, "personId", false, "PERSON_ID");
        public final static Property SpecialNo = new Property(2, String.class, "specialNo", false, "SPECIAL_NO");
        public final static Property MachineCode = new Property(3, String.class, "machineCode", false, "MACHINE_CODE");
        public final static Property MachineNo = new Property(4, String.class, "machineNo", false, "MACHINE_NO");
        public final static Property PregnantManualNo = new Property(5, String.class, "pregnantManualNo", false, "PREGNANT_MANUAL_NO");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property FlupDate = new Property(7, String.class, "flupDate", false, "FLUP_DATE");
        public final static Property HealthDesc = new Property(8, String.class, "healthDesc", false, "HEALTH_DESC");
        public final static Property PsychologicStatus = new Property(9, String.class, "psychologicStatus", false, "PSYCHOLOGIC_STATUS");
        public final static Property SBP = new Property(10, String.class, "SBP", false, "SBP");
        public final static Property DBP = new Property(11, String.class, "DBP", false, "DBP");
        public final static Property BreastCode = new Property(12, String.class, "breastCode", false, "BREAST_CODE");
        public final static Property BreastDesc = new Property(13, String.class, "breastDesc", false, "BREAST_DESC");
        public final static Property LochiaCode = new Property(14, String.class, "lochiaCode", false, "LOCHIA_CODE");
        public final static Property LochiaDesc = new Property(15, String.class, "lochiaDesc", false, "LOCHIA_DESC");
        public final static Property UterusCode = new Property(16, String.class, "uterusCode", false, "UTERUS_CODE");
        public final static Property UterusDesc = new Property(17, String.class, "uterusDesc", false, "UTERUS_DESC");
        public final static Property WoundCode = new Property(18, String.class, "woundCode", false, "WOUND_CODE");
        public final static Property WoundDesc = new Property(19, String.class, "woundDesc", false, "WOUND_DESC");
        public final static Property Other = new Property(20, String.class, "other", false, "OTHER");
        public final static Property TypeCode = new Property(21, String.class, "typeCode", false, "TYPE_CODE");
        public final static Property TypeDesc = new Property(22, String.class, "typeDesc", false, "TYPE_DESC");
        public final static Property GuideCodes = new Property(23, String.class, "guideCodes", false, "GUIDE_CODES");
        public final static Property GuideOther = new Property(24, String.class, "guideOther", false, "GUIDE_OTHER");
        public final static Property ProcessCode = new Property(25, String.class, "processCode", false, "PROCESS_CODE");
        public final static Property ReferralReason = new Property(26, String.class, "referralReason", false, "REFERRAL_REASON");
        public final static Property ReferralOrg = new Property(27, String.class, "referralOrg", false, "REFERRAL_ORG");
        public final static Property ReferralDepartment = new Property(28, String.class, "referralDepartment", false, "REFERRAL_DEPARTMENT");
        public final static Property VisitDoctorCode = new Property(29, String.class, "visitDoctorCode", false, "VISIT_DOCTOR_CODE");
        public final static Property VisitDoctorName = new Property(30, String.class, "visitDoctorName", false, "VISIT_DOCTOR_NAME");
        public final static Property VisitOrgCode = new Property(31, String.class, "visitOrgCode", false, "VISIT_ORG_CODE");
        public final static Property VisitOrgName = new Property(32, String.class, "visitOrgName", false, "VISIT_ORG_NAME");
    };


    public Postpartum42Visit_uploadDao(DaoConfig config) {
        super(config);
    }
    
    public Postpartum42Visit_uploadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POSTPARTUM42_VISIT_UPLOAD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PERSON_ID\" TEXT," + // 1: personId
                "\"SPECIAL_NO\" TEXT," + // 2: specialNo
                "\"MACHINE_CODE\" TEXT," + // 3: machineCode
                "\"MACHINE_NO\" TEXT," + // 4: machineNo
                "\"PREGNANT_MANUAL_NO\" TEXT," + // 5: pregnantManualNo
                "\"NAME\" TEXT," + // 6: name
                "\"FLUP_DATE\" TEXT," + // 7: flupDate
                "\"HEALTH_DESC\" TEXT," + // 8: healthDesc
                "\"PSYCHOLOGIC_STATUS\" TEXT," + // 9: psychologicStatus
                "\"SBP\" TEXT," + // 10: SBP
                "\"DBP\" TEXT," + // 11: DBP
                "\"BREAST_CODE\" TEXT," + // 12: breastCode
                "\"BREAST_DESC\" TEXT," + // 13: breastDesc
                "\"LOCHIA_CODE\" TEXT," + // 14: lochiaCode
                "\"LOCHIA_DESC\" TEXT," + // 15: lochiaDesc
                "\"UTERUS_CODE\" TEXT," + // 16: uterusCode
                "\"UTERUS_DESC\" TEXT," + // 17: uterusDesc
                "\"WOUND_CODE\" TEXT," + // 18: woundCode
                "\"WOUND_DESC\" TEXT," + // 19: woundDesc
                "\"OTHER\" TEXT," + // 20: other
                "\"TYPE_CODE\" TEXT," + // 21: typeCode
                "\"TYPE_DESC\" TEXT," + // 22: typeDesc
                "\"GUIDE_CODES\" TEXT," + // 23: guideCodes
                "\"GUIDE_OTHER\" TEXT," + // 24: guideOther
                "\"PROCESS_CODE\" TEXT," + // 25: processCode
                "\"REFERRAL_REASON\" TEXT," + // 26: referralReason
                "\"REFERRAL_ORG\" TEXT," + // 27: referralOrg
                "\"REFERRAL_DEPARTMENT\" TEXT," + // 28: referralDepartment
                "\"VISIT_DOCTOR_CODE\" TEXT," + // 29: visitDoctorCode
                "\"VISIT_DOCTOR_NAME\" TEXT," + // 30: visitDoctorName
                "\"VISIT_ORG_CODE\" TEXT," + // 31: visitOrgCode
                "\"VISIT_ORG_NAME\" TEXT);"); // 32: visitOrgName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POSTPARTUM42_VISIT_UPLOAD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Postpartum42Visit_upload entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(2, personId);
        }
 
        String specialNo = entity.getSpecialNo();
        if (specialNo != null) {
            stmt.bindString(3, specialNo);
        }
 
        String machineCode = entity.getMachineCode();
        if (machineCode != null) {
            stmt.bindString(4, machineCode);
        }
 
        String machineNo = entity.getMachineNo();
        if (machineNo != null) {
            stmt.bindString(5, machineNo);
        }
 
        String pregnantManualNo = entity.getPregnantManualNo();
        if (pregnantManualNo != null) {
            stmt.bindString(6, pregnantManualNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String flupDate = entity.getFlupDate();
        if (flupDate != null) {
            stmt.bindString(8, flupDate);
        }
 
        String healthDesc = entity.getHealthDesc();
        if (healthDesc != null) {
            stmt.bindString(9, healthDesc);
        }
 
        String psychologicStatus = entity.getPsychologicStatus();
        if (psychologicStatus != null) {
            stmt.bindString(10, psychologicStatus);
        }
 
        String SBP = entity.getSBP();
        if (SBP != null) {
            stmt.bindString(11, SBP);
        }
 
        String DBP = entity.getDBP();
        if (DBP != null) {
            stmt.bindString(12, DBP);
        }
 
        String breastCode = entity.getBreastCode();
        if (breastCode != null) {
            stmt.bindString(13, breastCode);
        }
 
        String breastDesc = entity.getBreastDesc();
        if (breastDesc != null) {
            stmt.bindString(14, breastDesc);
        }
 
        String lochiaCode = entity.getLochiaCode();
        if (lochiaCode != null) {
            stmt.bindString(15, lochiaCode);
        }
 
        String lochiaDesc = entity.getLochiaDesc();
        if (lochiaDesc != null) {
            stmt.bindString(16, lochiaDesc);
        }
 
        String uterusCode = entity.getUterusCode();
        if (uterusCode != null) {
            stmt.bindString(17, uterusCode);
        }
 
        String uterusDesc = entity.getUterusDesc();
        if (uterusDesc != null) {
            stmt.bindString(18, uterusDesc);
        }
 
        String woundCode = entity.getWoundCode();
        if (woundCode != null) {
            stmt.bindString(19, woundCode);
        }
 
        String woundDesc = entity.getWoundDesc();
        if (woundDesc != null) {
            stmt.bindString(20, woundDesc);
        }
 
        String other = entity.getOther();
        if (other != null) {
            stmt.bindString(21, other);
        }
 
        String typeCode = entity.getTypeCode();
        if (typeCode != null) {
            stmt.bindString(22, typeCode);
        }
 
        String typeDesc = entity.getTypeDesc();
        if (typeDesc != null) {
            stmt.bindString(23, typeDesc);
        }
 
        String guideCodes = entity.getGuideCodes();
        if (guideCodes != null) {
            stmt.bindString(24, guideCodes);
        }
 
        String guideOther = entity.getGuideOther();
        if (guideOther != null) {
            stmt.bindString(25, guideOther);
        }
 
        String processCode = entity.getProcessCode();
        if (processCode != null) {
            stmt.bindString(26, processCode);
        }
 
        String referralReason = entity.getReferralReason();
        if (referralReason != null) {
            stmt.bindString(27, referralReason);
        }
 
        String referralOrg = entity.getReferralOrg();
        if (referralOrg != null) {
            stmt.bindString(28, referralOrg);
        }
 
        String referralDepartment = entity.getReferralDepartment();
        if (referralDepartment != null) {
            stmt.bindString(29, referralDepartment);
        }
 
        String visitDoctorCode = entity.getVisitDoctorCode();
        if (visitDoctorCode != null) {
            stmt.bindString(30, visitDoctorCode);
        }
 
        String visitDoctorName = entity.getVisitDoctorName();
        if (visitDoctorName != null) {
            stmt.bindString(31, visitDoctorName);
        }
 
        String visitOrgCode = entity.getVisitOrgCode();
        if (visitOrgCode != null) {
            stmt.bindString(32, visitOrgCode);
        }
 
        String visitOrgName = entity.getVisitOrgName();
        if (visitOrgName != null) {
            stmt.bindString(33, visitOrgName);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Postpartum42Visit_upload readEntity(Cursor cursor, int offset) {
        Postpartum42Visit_upload entity = new Postpartum42Visit_upload( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // specialNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // machineCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // machineNo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pregnantManualNo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // flupDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // healthDesc
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // psychologicStatus
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // SBP
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // DBP
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // breastCode
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // breastDesc
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // lochiaCode
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // lochiaDesc
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // uterusCode
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // uterusDesc
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // woundCode
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // woundDesc
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // other
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // typeCode
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // typeDesc
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // guideCodes
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // guideOther
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // processCode
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // referralReason
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // referralOrg
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // referralDepartment
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // visitDoctorCode
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // visitDoctorName
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // visitOrgCode
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32) // visitOrgName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Postpartum42Visit_upload entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPersonId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSpecialNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMachineCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMachineNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPregnantManualNo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFlupDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHealthDesc(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPsychologicStatus(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSBP(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDBP(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBreastCode(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setBreastDesc(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setLochiaCode(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLochiaDesc(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUterusCode(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setUterusDesc(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setWoundCode(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setWoundDesc(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setOther(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setTypeCode(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setTypeDesc(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setGuideCodes(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setGuideOther(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setProcessCode(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setReferralReason(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setReferralOrg(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setReferralDepartment(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setVisitDoctorCode(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setVisitDoctorName(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setVisitOrgCode(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setVisitOrgName(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Postpartum42Visit_upload entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Postpartum42Visit_upload entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
