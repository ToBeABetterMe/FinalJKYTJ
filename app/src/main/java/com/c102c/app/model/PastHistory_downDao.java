package com.c102c.app.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.c102c.app.model.PastHistory_down;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PAST_HISTORY_DOWN".
*/
public class PastHistory_downDao extends AbstractDao<PastHistory_down, Long> {

    public static final String TABLENAME = "PAST_HISTORY_DOWN";

    /**
     * Properties of entity PastHistory_down.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PastHistoryType = new Property(1, String.class, "pastHistoryType", false, "PAST_HISTORY_TYPE");
        public final static Property PastHistoryCode = new Property(2, String.class, "pastHistoryCode", false, "PAST_HISTORY_CODE");
        public final static Property PastHistoryAdd = new Property(3, String.class, "pastHistoryAdd", false, "PAST_HISTORY_ADD");
        public final static Property PastHistoryDate = new Property(4, String.class, "pastHistoryDate", false, "PAST_HISTORY_DATE");
    };


    public PastHistory_downDao(DaoConfig config) {
        super(config);
    }
    
    public PastHistory_downDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PAST_HISTORY_DOWN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PAST_HISTORY_TYPE\" TEXT," + // 1: pastHistoryType
                "\"PAST_HISTORY_CODE\" TEXT," + // 2: pastHistoryCode
                "\"PAST_HISTORY_ADD\" TEXT," + // 3: pastHistoryAdd
                "\"PAST_HISTORY_DATE\" TEXT);"); // 4: pastHistoryDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PAST_HISTORY_DOWN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PastHistory_down entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pastHistoryType = entity.getPastHistoryType();
        if (pastHistoryType != null) {
            stmt.bindString(2, pastHistoryType);
        }
 
        String pastHistoryCode = entity.getPastHistoryCode();
        if (pastHistoryCode != null) {
            stmt.bindString(3, pastHistoryCode);
        }
 
        String pastHistoryAdd = entity.getPastHistoryAdd();
        if (pastHistoryAdd != null) {
            stmt.bindString(4, pastHistoryAdd);
        }
 
        String pastHistoryDate = entity.getPastHistoryDate();
        if (pastHistoryDate != null) {
            stmt.bindString(5, pastHistoryDate);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PastHistory_down readEntity(Cursor cursor, int offset) {
        PastHistory_down entity = new PastHistory_down( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pastHistoryType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pastHistoryCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pastHistoryAdd
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // pastHistoryDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PastHistory_down entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPastHistoryType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPastHistoryCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPastHistoryAdd(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPastHistoryDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PastHistory_down entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PastHistory_down entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
